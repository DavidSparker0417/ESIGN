{"ast":null,"code":"\"use strict\"; // This gets overridden by rollup\n\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n  constructor(locale) {\n    logger.checkAbstract(new.target, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  } // Subclasses may override this\n\n\n  split(mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  } // Subclasses may override this\n\n\n  join(words) {\n    return words.join(\" \");\n  }\n\n  static check(wordlist) {\n    const words = [];\n\n    for (let i = 0; i < 2048; i++) {\n      const word = wordlist.getWord(i);\n      /* istanbul ignore if */\n\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n\n      words.push(word);\n    }\n\n    return id(words.join(\"\\n\") + \"\\n\");\n  }\n\n  static register(lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n    /* istanbul ignore if */\n\n\n    if (exportWordlist) {\n      try {\n        const anyGlobal = window;\n\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  }\n\n}","map":{"version":3,"sources":["../src.ts/wordlist.ts"],"names":[],"mappings":"AAAA,a,CAEA;;AACA,MAAM,cAAc,GAAG,KAAvB;AAEA,SAAS,EAAT,QAAmB,qBAAnB;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,OAAO,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEP,OAAM,MAAgB,QAAhB,CAAwB;EAG1B,WAAA,CAAY,MAAZ,EAA0B;IACtB,MAAM,CAAC,aAAP,CAAqB,GAAG,CAAC,MAAzB,EAAiC,QAAjC;IACA,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,CAAd;EACH,CANyB,CAW1B;;;EACA,KAAK,CAAC,QAAD,EAAiB;IAClB,OAAO,QAAQ,CAAC,WAAT,GAAuB,KAAvB,CAA6B,KAA7B,CAAP;EACH,CAdyB,CAgB1B;;;EACA,IAAI,CAAC,KAAD,EAAqB;IACrB,OAAO,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;EACH;;EAEW,OAAL,KAAK,CAAC,QAAD,EAAmB;IAC3B,MAAM,KAAK,GAAG,EAAd;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;MAC3B,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAT,CAAiB,CAAjB,CAAb;MACA;;MACA,IAAI,CAAC,KAAK,QAAQ,CAAC,YAAT,CAAsB,IAAtB,CAAV,EAAuC;QAAE,OAAO,IAAP;MAAc;;MACvD,KAAK,CAAC,IAAN,CAAW,IAAX;IACH;;IACD,OAAO,EAAE,CAAC,KAAK,CAAC,IAAN,CAAW,IAAX,IAAmB,IAApB,CAAT;EACH;;EAEc,OAAR,QAAQ,CAAC,IAAD,EAAiB,IAAjB,EAA8B;IACzC,IAAI,CAAC,IAAL,EAAW;MAAE,IAAI,GAAG,IAAI,CAAC,MAAZ;IAAqB;IAElC;;;IACA,IAAI,cAAJ,EAAoB;MAChB,IAAI;QACA,MAAM,SAAS,GAAI,MAAnB;;QACA,IAAI,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,SAA3C,EAAsD;UAClD,IAAI,CAAC,SAAS,CAAC,OAAV,CAAkB,SAAlB,CAA4B,IAA5B,CAAL,EAAwC;YACnC,cAAc,CAAC,SAAS,CAAC,OAAV,CAAkB,SAAnB,EAA8B,IAA9B,EAAoC,IAApC,CAAd;UACJ;QACJ;MACJ,CAPD,CAOE,OAAO,KAAP,EAAc,CAAG;IACtB;EACJ;;AA9CyB","sourceRoot":"","sourcesContent":["\"use strict\";\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map"]},"metadata":{},"sourceType":"module"}