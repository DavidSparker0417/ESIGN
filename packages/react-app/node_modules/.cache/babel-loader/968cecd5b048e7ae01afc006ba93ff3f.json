{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\n\nexport function useBlockMeta() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const address = useMulticallAddress(queryParams);\n  const timestamp = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockMeta.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,cAA7B;AACA,SAAS,SAAT,QAA0B,0BAA1B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA,MAAM,gCAAgC,GAAG,YAAY,CAAC,kBAAb,CAAgC,0BAAhC,EAA4D,EAA5D,CAAzC;AACA,MAAM,iCAAiC,GAAG,YAAY,CAAC,kBAAb,CAAgC,2BAAhC,EAA6D,EAA7D,CAA1C;AAEA;;;AAGG;;AACH,OAAM,SAAU,YAAV,GAAoD;EAAA,IAA7B,WAA6B,uEAAF,EAAE;EACxD,MAAM,OAAO,GAAG,UAAU,CAAC;IAAE;EAAF,CAAD,CAA1B;EAEA,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAD,CAAnC;EACA,MAAM,SAAS,GAAG,UAAU,CAC1B,OAAO,IAAI,OAAO,KAAK,SAAvB,IAAoC;IAAE,OAAF;IAAW,IAAI,EAAE,gCAAjB;IAAmD;EAAnD,CADV,CAA5B;EAGA,MAAM,UAAU,GAAG,UAAU,CAC3B,OAAO,IAAI,OAAO,KAAK,SAAvB,IAAoC;IAAE,OAAF;IAAW,IAAI,EAAE,iCAAjB;IAAoD;EAApD,CADT,CAA7B;EAIA,OAAO;IACL,SAAS,EAAE,SAAS,KAAK,SAAd,GAA0B,IAAI,IAAJ,CAAS,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,KAAzB,EAAgC,GAAhC,CAAoC,IAApC,EAA0C,QAA1C,EAAT,CAA1B,GAA2F,SADjG;IAEL,UAAU,EAAE,UAAU,KAAK,SAAf,GAA2B,SAAS,CAAC,IAAV,CAAe,UAAU,CAAC,KAA1B,CAA3B,GAA8D;EAFrE,CAAP;AAID","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams = {}) {\n    const chainId = useChainId({ queryParams });\n    const address = useMulticallAddress(queryParams);\n    const timestamp = useRawCall(address && chainId !== undefined && { address, data: GET_CURRENT_BLOCK_TIMESTAMP_CALL, chainId });\n    const difficulty = useRawCall(address && chainId !== undefined && { address, data: GET_CURRENT_BLOCK_DIFFICULTY_CALL, chainId });\n    return {\n        timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n        difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    };\n}\n//# sourceMappingURL=useBlockMeta.js.map"]},"metadata":{},"sourceType":"module"}