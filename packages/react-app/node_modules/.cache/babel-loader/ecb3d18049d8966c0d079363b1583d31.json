{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit } from 'graphql';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\".concat(directive.name.value, \" directive.\")) : invariant(evaledValue !== void 0, 37);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport function hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\".concat(directiveName, \" directive.\")) : invariant(directiveArguments && directiveArguments.length === 1, 38);\n      var ifArgument = directiveArguments[0];\n      __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\".concat(directiveName, \" directive.\")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 39);\n      var ifValue = ifArgument.value;\n      __DEV__ ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\".concat(directiveName, \" directive must be a variable or a boolean value.\")) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 40);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/directives.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}