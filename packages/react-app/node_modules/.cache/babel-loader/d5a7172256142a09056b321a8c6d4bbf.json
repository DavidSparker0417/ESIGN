{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = isNonNullObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = value.slice(0);\n        } else {\n          value = __assign({\n            __proto__: Object.getPrototypeOf(value)\n          }, value);\n        }\n\n        this.pastCopies.add(value);\n      }\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexport { DeepMerger };","map":{"version":3,"sources":["../../../src/utilities/common/mergeDeep.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNonNullObject } from \"./objects\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}