{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n} ///////////////////////////////\n// Exported Abstracts\n\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        block,\n        gasPrice\n      } = yield resolveProperties({\n        block: this.getBlock(\"latest\"),\n        gasPrice: this.getGasPrice().catch(error => {\n          // @TODO: Why is this now failing on Calaveras?\n          //console.log(error);\n          return null;\n        })\n      });\n      let maxFeePerGas = null,\n          maxPriorityFeePerGas = null;\n\n      if (block && block.baseFeePerGas) {\n        // We may want to compute this more accurately in the future,\n        // using the formula \"check if the base fee is correct\".\n        // See: https://eips.ethereum.org/EIPS/eip-1559\n        maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n      }\n\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice\n      };\n    });\n  } // Alias for \"on\"\n\n\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  } // Alias for \"off\"\n\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nexport class BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\nexport class TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { block, gasPrice } = yield resolveProperties({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error) => {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}