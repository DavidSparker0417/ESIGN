{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(41);\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 42);\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value, \".\")) : invariant(fragment, 43);\n        return fragment;\n      }\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/fragments.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,cAApB,QAA0C,qBAA1C;AAkCA,OAAM,SAAU,wBAAV,CACJ,QADI,EAEJ,YAFI,EAEiB;EAErB,IAAI,kBAAkB,GAAG,YAAzB;EAKA,IAAM,SAAS,GAAkC,EAAjD;EACA,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAA6B,UAAA,UAAA,EAAU;IAGrC,IAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;MAC7C,MAAM,OAAI,GAAA,IAAA,cAAA,CACR,WAAW,MAAX,CAAqB,UAAU,CAAA,SAA/B,EAA+B,YAA/B,EACE,MADF,CACY,UAAQ,CAAA,IAAR,GAAQ,WAAW,MAAX,CAAqB,UAAM,CAAK,IAAX,CAAW,KAAhC,EAAwC,GAAxC,CAAR,GACR,EAFJ,EAEI,IAFJ,IAGE,yFAJM,CAAA,GAKR,IAAA,cAAA,CAAA,EAAA,CALF;IAMD;;IAGD,IAAI,UAAU,CAAC,IAAX,KAAoB,oBAAxB,EAA8C;MAC5C,SAAS,CAAC,IAAV,CAAe,UAAf;IACD;EACF,CAhBD;;EAoBA,IAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;IAC7C,OAAA,GACE,SAAS,CAAC,SAAM,CAAA,MAAN,KACV,CADS,EACT,SACE,MADF,CACY,SAAM,CAAA,MADlB,EACkB,mFADlB,CADS,CADX,GAKE,SAAA,CAAA,SAAA,CAAA,MAAA,KAAA,CAAA,EAAA,EAAA,CALF;IAMA,kBAAkB,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,IAAb,CAAkB,KAAvC;EACD;;EAID,IAAM,KAAK,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,QADM,CAAA,EACE;IACX,WAAW,EAAA,aAAA,CAAA,CACT;MACE,IAAI,EAAE,qBADR;MAGE,SAAS,EAAE,OAHb;MAIE,YAAY,EAAE;QACZ,IAAI,EAAE,cADM;QAEZ,UAAU,EAAE,CACV;UACE,IAAI,EAAE,gBADR;UAEE,IAAI,EAAE;YACJ,IAAI,EAAE,MADF;YAEJ,KAAK,EAAE;UAFH;QAFR,CADU;MAFA;IAJhB,CADS,CAAA,EAkBN,QAAQ,CAAC,WAlBH,EAkBc,IAlBd;EADA,CADF,CAAX;;EAwBA,OAAO,KAAP;AACD;AAWD,OAAM,SAAU,iBAAV,CACJ,SADI,EACoC;EAAxC,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,EAAA;EAAwC;;EAExC,IAAM,QAAQ,GAAgB,EAA9B;EACA,SAAS,CAAC,OAAV,CAAkB,UAAA,QAAA,EAAQ;IACxB,QAAQ,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAf,CAAR,GAAgC,QAAhC;EACD,CAFD;EAGA,OAAO,QAAP;AACD;AAED,OAAM,SAAU,wBAAV,CACJ,SADI,EAEJ,WAFI,EAEqB;EAEzB,QAAQ,SAAS,CAAC,IAAlB;IACE,KAAK,gBAAL;MACE,OAAO,SAAP;;IACF,KAAK,gBAAL;MAAuB;QACrB,IAAM,QAAQ,GAAG,WAAW,IAAI,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAA3C;QACA,OAAA,GAAU,SAAQ,CAAE,QAAF,EAAE,qBAAqB,MAArB,CAA+B,SAAK,CAAK,IAAV,CAAU,KAAzC,EAA8C,GAA9C,CAAF,CAAlB,GAAkE,SAAA,CAAA,QAAA,EAAA,EAAA,CAAlE;QACA,OAAO,QAAP;MACD;;IACD;MACE,OAAO,IAAP;EATJ;AAWD","sourcesContent":["import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition' as Kind,\n        // OperationTypeNode is an enum\n        operation: 'query' as OperationTypeNode,\n        selectionSet: {\n          kind: 'SelectionSet' as Kind,\n          selections: [\n            {\n              kind: 'FragmentSpread' as Kind,\n              name: {\n                kind: 'Name' as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}