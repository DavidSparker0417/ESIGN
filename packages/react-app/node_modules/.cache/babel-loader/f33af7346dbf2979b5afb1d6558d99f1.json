{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new InfuraProvider(network, apiKey);\n    const connection = provider.connection;\n\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n\n    const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    defineReadOnly(this, \"apiKey\", provider.projectId);\n    defineReadOnly(this, \"projectId\", provider.projectId);\n    defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new InfuraWebSocketProvider(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      apiKey: defaultProjectId,\n      projectId: defaultProjectId,\n      projectSecret: null\n    };\n\n    if (apiKey == null) {\n      return apiKeyObj;\n    }\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.projectId = apiKey;\n    } else if (apiKey.projectSecret != null) {\n      logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n      logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n      apiKeyObj.projectId = apiKey.projectId;\n      apiKeyObj.projectSecret = apiKey.projectSecret;\n    } else if (apiKey.projectId) {\n      apiKeyObj.projectId = apiKey.projectId;\n    }\n\n    apiKeyObj.apiKey = apiKeyObj.projectId;\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"mainnet.infura.io\";\n        break;\n\n      case \"ropsten\":\n        host = \"ropsten.infura.io\";\n        break;\n\n      case \"rinkeby\":\n        host = \"rinkeby.infura.io\";\n        break;\n\n      case \"kovan\":\n        host = \"kovan.infura.io\";\n        break;\n\n      case \"goerli\":\n        host = \"goerli.infura.io\";\n        break;\n\n      case \"matic\":\n        host = \"polygon-mainnet.infura.io\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai.infura.io\";\n        break;\n\n      case \"optimism\":\n        host = \"optimism-mainnet.infura.io\";\n        break;\n\n      case \"optimism-kovan\":\n        host = \"optimism-kovan.infura.io\";\n        break;\n\n      case \"arbitrum\":\n        host = \"arbitrum-mainnet.infura.io\";\n        break;\n\n      case \"arbitrum-rinkeby\":\n        host = \"arbitrum-rinkeby.infura.io\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.projectId === defaultProjectId) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/infura-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map"]},"metadata":{},"sourceType":"module"}