{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey != null) {\n      logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n    }\n\n    return null;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"https://cloudflare-eth.com/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return host;\n  }\n\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      // The Cloudflare provider does not support eth_blockNumber,\n      // so we get the latest block and pull it from that\n      if (method === \"getBlockNumber\") {\n        const block = yield _super.perform.call(this, \"getBlock\", {\n          blockTag: \"latest\"\n        });\n        return block.number;\n      }\n\n      return _super.perform.call(this, method, params);\n    });\n  }\n\n}","map":{"version":3,"sources":["../src.ts/cloudflare-provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,kBAAT,QAAmC,yBAAnC;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,OAAM,MAAO,kBAAP,SAAkC,kBAAlC,CAAoD;EAEtC,OAAT,SAAS,CAAC,MAAD,EAAY;IACxB,IAAI,MAAM,IAAI,IAAd,EAAoB;MAChB,MAAM,CAAC,kBAAP,CAA0B,qCAA1B,EAAiE,QAAjE,EAA2E,MAA3E;IACH;;IACD,OAAO,IAAP;EACH;;EAEY,OAAN,MAAM,CAAC,OAAD,EAAmB,MAAnB,EAA+B;IACxC,IAAI,IAAI,GAAG,IAAX;;IACA,QAAQ,OAAO,CAAC,IAAhB;MACI,KAAK,WAAL;QACI,IAAI,GAAG,6BAAP;QACA;;MACJ;QACG,MAAM,CAAC,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4D,SAAS,CAAC,CAAD,CAArE;IALP;;IAQA,OAAO,IAAP;EACH;;EAEK,OAAO,CAAC,MAAD,EAAiB,MAAjB,EAA4B;;;;;;;;MACrC;MACA;MACA,IAAI,MAAM,KAAK,gBAAf,EAAiC;QAC7B,MAAM,KAAK,GAAG,MAAM,MAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb,EAAc,UAAd,EAA0B;UAAE,QAAQ,EAAE;QAAZ,CAA1B,CAApB;QACA,OAAO,KAAK,CAAC,MAAb;MACH;;MAED,OAAO,MAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb,EAAc,MAAd,EAAsB,MAAtB,CAAP;IACH,C;EAAA;;AA/BqD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            // The Cloudflare provider does not support eth_blockNumber,\n            // so we get the latest block and pull it from that\n            if (method === \"getBlockNumber\") {\n                const block = yield _super.perform.call(this, \"getBlock\", { blockTag: \"latest\" });\n                return block.number;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n}\n//# sourceMappingURL=cloudflare-provider.js.map"]},"metadata":{},"sourceType":"module"}