{"ast":null,"code":"import { __extends } from \"tslib\";\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nexport { InvariantError };\nexport function invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod(name) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      var method = console[name] || console.log;\n      return method.apply(console, arguments);\n    }\n  };\n}\n\n(function (invariant) {\n  invariant.debug = wrapConsoleMethod(\"debug\");\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n\nexport function setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\nexport default invariant;","map":{"version":3,"sources":["../src/invariant.ts"],"names":[],"mappings":";AAAA,IAAM,cAAc,GAAG,qBAAvB;AAEE,IAAA,EAAA,GAIE,MAAa,CADd,cAHD;AAAA,IAAA,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAU,GAAV,EAAoB,KAApB,EAA8B;EAC7C,GAAG,CAAC,SAAJ,GAAgB,KAAhB;EACA,OAAO,GAAP;AACD,CAHa,GAGb,EAHD;;AAMF,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;EAGlC,SAAA,cAAA,CAAY,OAAZ,EAAqD;IAAzC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,cAAA;IAAyC;;IAArD,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,OAAO,OAAP,KAAmB,QAAnB,GACO,cAAc,GAAA,IAAd,GAAmB,OAAnB,GAA0B,4DADjC,GAEI,OAHN,KAIC,IALH;;IAFA,KAAA,CAAA,WAAA,GAAc,CAAd;IACA,KAAA,CAAA,IAAA,GAAO,cAAP;IAOE,cAAc,CAAC,KAAD,EAAO,cAAc,CAAC,SAAtB,CAAd;;EACD;;EACH,OAAA,cAAA;AAAC,CAXD,CAAoC,KAApC,CAAA;;;AAaA,OAAM,SAAU,SAAV,CACJ,SADI,EAEJ,OAFI,EAEqB;EAEzB,IAAI,CAAC,SAAL,EAAgB;IACd,MAAM,IAAI,cAAJ,CAAmB,OAAnB,CAAN;EACD;AACF;AAED,IAAM,eAAe,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,EAAkC,QAAlC,CAAxB;AAGA,IAAI,cAAc,GAAG,eAAe,CAAC,OAAhB,CAAwB,KAAxB,CAArB;;AAEA,SAAS,iBAAT,CAAwD,IAAxD,EAA+D;EAC7D,OAAO,YAAA;IACL,IAAI,eAAe,CAAC,OAAhB,CAAwB,IAAxB,KAAiC,cAArC,EAAqD;MACnD;MACA;MACA,IAAM,MAAM,GAAG,OAAO,CAAC,IAAD,CAAP,IAAiB,OAAO,CAAC,GAAxC;MACA,OAAO,MAAM,CAAC,KAAP,CAAa,OAAb,EAAsB,SAAtB,CAAP;IACD;EACqB,CAPxB;AAQD;;AAED,CAAA,UAAiB,SAAjB,EAA0B;EACX,SAAA,CAAA,KAAA,GAAQ,iBAAiB,CAAC,OAAD,CAAzB;EACA,SAAA,CAAA,GAAA,GAAM,iBAAiB,CAAC,KAAD,CAAvB;EACA,SAAA,CAAA,IAAA,GAAO,iBAAiB,CAAC,MAAD,CAAxB;EACA,SAAA,CAAA,KAAA,GAAQ,iBAAiB,CAAC,OAAD,CAAzB;AACd,CALD,EAAiB,SAAS,KAAT,SAAS,GAAA,EAAA,CAA1B;;AAOA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAA4C;EAChD,IAAM,GAAG,GAAG,eAAe,CAAC,cAAD,CAA3B;EACA,cAAc,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,eAAe,CAAC,OAAhB,CAAwB,KAAxB,CAAZ,CAAjB;EACA,OAAO,GAAP;AACD;AAED,eAAe,SAAf","sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}