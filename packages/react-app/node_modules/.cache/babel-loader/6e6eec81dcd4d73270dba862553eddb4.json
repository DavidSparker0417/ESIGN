{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var internalState = useInternalState(useApolloClient(options && options.client), query);\n  var execOptionsRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n\n        return method.apply(this, arguments);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var promise = internalState.asyncUpdate().then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,EAAsB,OAAtB,EAA+B,MAA/B,QAA6C,OAA7C;AAGA,SAAS,YAAT,QAA6B,0BAA7B;AAMA,SAAS,gBAAT,QAAiC,eAAjC;AACA,SAAS,eAAT,QAAgC,sBAAhC;AAIA,IAAM,aAAa,GAAG,CACpB,SADoB,EAEpB,WAFoB,EAGpB,WAHoB,EAIpB,aAJoB,EAKpB,cALoB,EAMpB,iBANoB,CAAtB;AASA,OAAM,SAAU,YAAV,CACJ,KADI,EAEJ,OAFI,EAE6C;EAEjD,IAAM,aAAa,GAAG,gBAAgB,CACpC,eAAe,CAAC,OAAO,IAAI,OAAO,CAAC,MAApB,CADqB,EAEpC,KAFoC,CAAtC;EAKA,IAAM,cAAc,GAAG,MAAM,EAA7B;EACA,IAAM,MAAM,GAAG,cAAc,CAAC,OAAf,GACX,YAAY,CAAC,OAAD,EAAU,cAAc,CAAC,OAAzB,CADD,GAEX,OAFJ;EAIA,IAAM,cAAc,GAAG,aAAa,CAAC,QAAd,CAAsB,QAAA,CAAA,QAAA,CAAA,EAAA,EACxC,MADwC,CAAA,EAClC;IACT,IAAI,EAAE,CAAC,cAAc,CAAC;EADb,CADkC,CAAtB,CAAvB;EAKA,IAAM,kBAAkB,GACtB,cAAc,CAAC,UAAf,CAA0B,OAA1B,CAAkC,kBAAlC,IACA,aAAa,CAAC,qBAAd,EAFF;EAIA,IAAM,MAAM,GACV,MAAM,CAAC,MAAP,CAAc,cAAd,EAA8B;IAC5B,MAAM,EAAE,CAAC,CAAC,cAAc,CAAC;EADG,CAA9B,CADF;EAMA,IAAM,YAAY,GAAG,OAAO,CAAC,YAAA;IAC3B,IAAM,YAAY,GAAwB,EAA1C;;4BACW,G,EAAG;MACZ,IAAM,MAAM,GAAG,MAAM,CAAC,GAAD,CAArB;;MACA,YAAY,CAAC,GAAD,CAAZ,GAAoB,YAAA;QAClB,IAAI,CAAC,cAAc,CAAC,OAApB,EAA6B;UAC3B,cAAc,CAAC,OAAf,GAAyB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAzB;UAEA,aAAa,CAAC,WAAd;QACD;;QACD,OAAO,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP;MACD,CAPD;;;IAFF,KAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,eAAA,GAAA,aAAlB,EAAkB,EAAA,GAAA,eAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA+B;MAA1B,IAAM,GAAG,GAAA,eAAA,CAAA,EAAA,CAAT;;cAAM,G;IAUV;;IAED,OAAO,YAAP;EACD,CAf2B,EAezB,EAfyB,CAA5B;EAiBA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,YAAtB;EAEA,IAAM,OAAO,GAAG,WAAW,CAEzB,UAAA,cAAA,EAAc;IACd,cAAc,CAAC,OAAf,GAAyB,cAAc,GAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EACpC,cADoC,CAAA,EACtB;MACjB,WAAW,EAAE,cAAc,CAAC,WAAf,IAA8B;IAD1B,CADsB,CAAF,GAGnC;MACF,WAAW,EAAE;IADX,CAHJ;IAOA,IAAM,OAAO,GAAG,aAAa,CAC1B,WADa,GAEb,IAFa,CAER,UAAA,WAAA,EAAW;MAAI,OAAA,MAAM,CAAC,MAAP,CAAc,WAAd,EAAA,YAAA,CAAA;IAAwC,CAF/C,CAAhB;IAMA,OAAO,CAAC,KAAR,CAAc,YAAA,CAAQ,CAAtB;IAEA,OAAO,OAAP;EACD,CAnB0B,EAmBxB,EAnBwB,CAA3B;EAqBA,OAAO,CAAC,OAAD,EAAU,MAAV,CAAP;AACD","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}