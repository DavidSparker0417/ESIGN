{"ast":null,"code":"import { __assign, __rest as __rest_1, __spreadArray } from \"tslib\";\nimport { __rest } from \"tslib\";\nimport { mergeDeep } from \"../common/mergeDeep.js\";\nexport function concatPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n\n  return {\n    keyArgs: keyArgs,\n    merge: function (existing, incoming) {\n      return existing ? __spreadArray(__spreadArray([], existing, true), incoming, true) : incoming;\n    }\n  };\n}\nexport function offsetLimitPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n\n  return {\n    keyArgs: keyArgs,\n    merge: function (existing, incoming, _a) {\n      var args = _a.args;\n      var merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          var _b = args.offset,\n              offset = _b === void 0 ? 0 : _b;\n\n          for (var i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          merged.push.apply(merged, incoming);\n        }\n      }\n\n      return merged;\n    }\n  };\n}\nexport function relayStylePagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n\n  return {\n    keyArgs: keyArgs,\n    read: function (existing, _a) {\n      var canRead = _a.canRead,\n          readField = _a.readField;\n      if (!existing) return existing;\n      var edges = [];\n      var firstEdgeCursor = \"\";\n      var lastEdgeCursor = \"\";\n      existing.edges.forEach(function (edge) {\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      var _b = existing.pageInfo || {},\n          startCursor = _b.startCursor,\n          endCursor = _b.endCursor;\n\n      return __assign(__assign({}, getExtras(existing)), {\n        edges: edges,\n        pageInfo: __assign(__assign({}, existing.pageInfo), {\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor\n        })\n      });\n    },\n    merge: function (existing, incoming, _a) {\n      var args = _a.args,\n          isReference = _a.isReference,\n          readField = _a.readField;\n\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {\n        if (isReference(edge = __assign({}, edge))) {\n          edge.cursor = readField(\"cursor\", edge);\n        }\n\n        return edge;\n      }) : [];\n\n      if (incoming.pageInfo) {\n        var pageInfo_1 = incoming.pageInfo;\n        var startCursor = pageInfo_1.startCursor,\n            endCursor = pageInfo_1.endCursor;\n        var firstEdge = incomingEdges[0];\n        var lastEdge = incomingEdges[incomingEdges.length - 1];\n\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n\n        var firstCursor = firstEdge && firstEdge.cursor;\n\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor\n            }\n          });\n        }\n\n        var lastCursor = lastEdge && lastEdge.cursor;\n\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor\n            }\n          });\n        }\n      }\n\n      var prefix = existing.edges;\n      var suffix = [];\n\n      if (args && args.after) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.after;\n        });\n\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n        }\n      } else if (args && args.before) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.before;\n        });\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        prefix = [];\n      }\n\n      var edges = __spreadArray(__spreadArray(__spreadArray([], prefix, true), incomingEdges, true), suffix, true);\n\n      var pageInfo = __assign(__assign({}, incoming.pageInfo), existing.pageInfo);\n\n      if (incoming.pageInfo) {\n        var _b = incoming.pageInfo,\n            hasPreviousPage = _b.hasPreviousPage,\n            hasNextPage = _b.hasNextPage,\n            startCursor = _b.startCursor,\n            endCursor = _b.endCursor,\n            extras = __rest_1(_b, [\"hasPreviousPage\", \"hasNextPage\", \"startCursor\", \"endCursor\"]);\n\n        Object.assign(pageInfo, extras);\n\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return __assign(__assign(__assign({}, getExtras(existing)), getExtras(incoming)), {\n        edges: edges,\n        pageInfo: pageInfo\n      });\n    }\n  };\n}\n\nvar getExtras = function (obj) {\n  return __rest(obj, notExtras);\n};\n\nvar notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData() {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\"\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/utilities/policies/pagination.ts"],"names":[],"mappings":"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","sourcesContent":["import { __rest } from \"tslib\";\n\nimport { FieldPolicy, Reference } from '../../cache';\nimport { mergeDeep } from '../common/mergeDeep';\n\ntype KeyArgs = FieldPolicy<any>[\"keyArgs\"];\n\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nexport function concatPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [\n        ...existing,\n        ...incoming,\n      ] : incoming;\n    },\n  };\n}\n\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nexport function offsetLimitPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming, { args }) {\n      const merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const { offset = 0 } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push.apply(merged, incoming);\n        }\n      }\n\n      return merged;\n    },\n  };\n}\n\n// Whether TRelayEdge<TNode> is a normalized Reference or a non-normalized\n// object, it needs a .cursor property where the relayStylePagination\n// merge function can store cursor strings taken from pageInfo. Storing an\n// extra reference.cursor property should be safe, and is easier than\n// attempting to update the cursor field of the normalized StoreObject\n// that the reference refers to, or managing edge wrapper objects\n// (something I attempted in #7023, but abandoned because of #7088).\nexport type TRelayEdge<TNode> = {\n  cursor?: string;\n  node: TNode;\n} | (Reference & { cursor?: string });\n\nexport type TRelayPageInfo = {\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n  startCursor: string;\n  endCursor: string;\n};\n\nexport type TExistingRelay<TNode> = Readonly<{\n  edges: TRelayEdge<TNode>[];\n  pageInfo: TRelayPageInfo;\n}>;\n\nexport type TIncomingRelay<TNode> = {\n  edges?: TRelayEdge<TNode>[];\n  pageInfo?: TRelayPageInfo;\n};\n\nexport type RelayFieldPolicy<TNode> = FieldPolicy<\n  TExistingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null\n>;\n\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nexport function relayStylePagination<TNode = Reference>(\n  keyArgs: KeyArgs = false,\n): RelayFieldPolicy<TNode> {\n  return {\n    keyArgs,\n\n    read(existing, { canRead, readField }) {\n      if (!existing) return existing;\n\n      const edges: TRelayEdge<TNode>[] = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach(edge => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      const {\n        startCursor,\n        endCursor,\n      } = existing.pageInfo || {};\n\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor,\n        },\n      };\n    },\n\n    merge(existing, incoming, { args, isReference, readField }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      const incomingEdges = incoming.edges ? incoming.edges.map(edge => {\n        if (isReference(edge = { ...edge })) {\n          // In case edge is a Reference, we read out its cursor field and\n          // store it as an extra property of the Reference object.\n          edge.cursor = readField<string>(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n\n      if (incoming.pageInfo) {\n        const { pageInfo } = incoming;\n        const { startCursor, endCursor } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor,\n            },\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor,\n            },\n          });\n        }\n      }\n\n      let prefix = existing.edges;\n      let suffix: typeof prefix = [];\n\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex(edge => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex(edge => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n\n      const edges = [\n        ...prefix,\n        ...incomingEdges,\n        ...suffix,\n      ];\n\n      const pageInfo: TRelayPageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo,\n      };\n\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage, hasNextPage,\n          startCursor, endCursor,\n          ...extras\n        } = incoming.pageInfo;\n\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo,\n      };\n    },\n  };\n}\n\n// Returns any unrecognized properties of the given object.\nconst getExtras = (obj: Record<string, any>) => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData(): TExistingRelay<any> {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\",\n    },\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}