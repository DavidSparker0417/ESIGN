{"ast":null,"code":"import { InvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nexport function makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\nexport function isReference(obj) {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\nexport function isDocumentNode(value) {\n  return isNonNullObject(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\n\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw __DEV__ ? new InvariantError(\"The inline argument \\\"\".concat(name.value, \"\\\" of kind \\\"\").concat(value.kind, \"\\\"\") + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.') : new InvariantError(52);\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n  if (args && directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return \"\".concat(directives['connection']['key'], \"(\").concat(stringify(filteredArgs_1), \")\");\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\".concat(key, \"(\").concat(stringify(directives[key]), \")\");\n      } else {\n        completeFieldName += \"@\".concat(key);\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify: function (s) {\n    var previous = stringify;\n    stringify = s;\n    return previous;\n  }\n});\n\nvar stringify = function defaultStringify(value) {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key, value) {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce(function (copy, key) {\n      copy[key] = value[key];\n      return copy;\n    }, {});\n  }\n\n  return value;\n}\n\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\nexport function isField(selection) {\n  return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/storeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}