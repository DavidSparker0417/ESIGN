{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport function toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function (data) {\n        if (completed) {\n          __DEV__ && invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/link/utils/toPromise.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,kCAA1B;AAGA,OAAM,SAAU,SAAV,CAAuB,UAAvB,EAAgD;EACpD,IAAI,SAAS,GAAG,KAAhB;EACA,OAAO,IAAI,OAAJ,CAAe,UAAC,OAAD,EAAU,MAAV,EAAgB;IACpC,UAAU,CAAC,SAAX,CAAqB;MACnB,IAAI,EAAE,UAAA,IAAA,EAAI;QACR,IAAI,SAAJ,EAAe;UACb,OAAA,IAAU,SACR,CAAA,IADQ,CACR,mEADQ,CAAV;QAGD,CAJD,MAIO;UACL,SAAS,GAAG,IAAZ;UACA,OAAO,CAAC,IAAD,CAAP;QACD;MACF,CAVkB;MAWnB,KAAK,EAAE;IAXY,CAArB;EAaD,CAdM,CAAP;AAeD","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { Observable } from '../../utilities';\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}