{"ast":null,"code":"import { maybe } from \"../globals/index.js\";\nexport var canUseWeakMap = typeof WeakMap === 'function' && maybe(function () {\n  return navigator.product;\n}) !== 'ReactNative';\nexport var canUseWeakSet = typeof WeakSet === 'function';\nexport var canUseSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function';\nexport var canUseDOM = typeof maybe(function () {\n  return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = maybe(function () {\n  return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\nexport var canUseLayoutEffect = canUseDOM && !usingJSDOM;","map":{"version":3,"sources":["../../../src/utilities/common/canUse.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,qBAAtB;AAEA,OAAO,IAAM,aAAa,GACxB,OAAO,OAAP,KAAmB,UAAnB,IACA,KAAK,CAAC,YAAA;EAAM,OAAA,SAAS,CAAT,OAAA;AAAiB,CAAxB,CAAL,KAAmC,aAF9B;AAIP,OAAO,IAAM,aAAa,GAAG,OAAO,OAAP,KAAmB,UAAzC;AAEP,OAAO,IAAM,YAAY,GACvB,OAAO,MAAP,KAAkB,UAAlB,IACA,OAAO,MAAM,CAAC,GAAd,KAAsB,UAFjB;AAIP,OAAO,IAAM,SAAS,GACpB,OAAO,KAAK,CAAC,YAAA;EAAM,OAAA,MAAM,CAAC,QAAP,CAAA,aAAA;AAA6B,CAApC,CAAZ,KAAsD,UADjD;AAGP,IAAM,UAAU,GASd,KAAK,CAAC,YAAA;EAAM,OAAA,SAAS,CAAC,SAAV,CAAoB,OAApB,CAA4B,OAA5B,KAAA,CAAA;AAAyC,CAAhD,CAAL,IAA0D,KAT5D;AAiBA,OAAO,IAAM,kBAAkB,GAAG,SAAS,IAAI,CAAC,UAAzC","sourcesContent":["import { maybe } from \"../globals\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === 'function' &&\n  maybe(() => navigator.product) !== 'ReactNative';\n\nexport const canUseWeakSet = typeof WeakSet === 'function';\n\nexport const canUseSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.for === 'function';\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = canUseDOM && !usingJSDOM;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}