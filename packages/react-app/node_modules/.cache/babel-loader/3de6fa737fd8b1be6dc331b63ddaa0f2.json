{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const resetState = useCallback(() => {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  const promiseTransaction = useCallback(async transactionPromise => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      setState({\n        status: 'PendingSignature',\n        chainId\n      });\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n      return receipt;\n    } catch (e) {\n      const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/usePromiseTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\nconst isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None' });\n    const { addTransaction } = useTransactionsContext();\n    const { addNotification } = useNotificationsContext();\n    const resetState = useCallback(() => {\n        setState({ status: 'None' });\n    }, [setState]);\n    const promiseTransaction = useCallback(async (transactionPromise) => {\n        var _a, _b, _c, _d, _e, _f;\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            setState({ status: 'PendingSignature', chainId });\n            transaction = await transactionPromise;\n            setState({ transaction, status: 'Mining', chainId });\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            const receipt = await transaction.wait();\n            setState({ receipt, transaction, status: 'Success', chainId });\n            return receipt;\n        }\n        catch (e) {\n            const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n            if (transaction) {\n                const droppedAndReplaced = isDroppedAndReplaced(e);\n                if (droppedAndReplaced) {\n                    const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n                    const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                    addNotification({\n                        notification: {\n                            type,\n                            submittedAt: Date.now(),\n                            transaction: e.replacement,\n                            receipt: e.receipt,\n                            transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                            originalTransaction: transaction,\n                        },\n                        chainId,\n                    });\n                    setState({\n                        status,\n                        transaction: e.replacement,\n                        originalTransaction: transaction,\n                        receipt: e.receipt,\n                        errorMessage,\n                        chainId,\n                    });\n                }\n                else {\n                    setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId });\n                }\n            }\n            else {\n                setState({ status: 'Exception', errorMessage, chainId });\n            }\n            return undefined;\n        }\n    }, [chainId, setState, addTransaction, options]);\n    return { promiseTransaction, state, resetState };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map"]},"metadata":{},"sourceType":"module"}