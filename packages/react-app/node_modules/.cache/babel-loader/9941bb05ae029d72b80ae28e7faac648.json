{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { wrap } from 'optimism';\nimport { isField, resultKeyNameFromField, isReference, makeReference, createFragmentMap, shouldInclude, addTypenameToDocument, getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { getTypenameFromStoreObject, isArray, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n;\n\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context, options.context.canonizeResults];\n}\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config)\n    });\n    this.canon = config.canon || new ObjectCanon();\n    this.executeSelectionSet = wrap(function (options) {\n      var _a;\n\n      var canonizeResults = options.context.canonizeResults;\n      var peekArgs = execSelectionSetKeyArgs(options);\n      peekArgs[3] = !canonizeResults;\n\n      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return __assign(__assign({}, other), {\n            result: _this.canon.admit(other.result)\n          });\n        }\n\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSelectionSetImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n\n  StoreReader.prototype.resetCanon = function () {\n    this.canon = new ObjectCanon();\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        _b = _a.rootId,\n        rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        variables = _a.variables,\n        _c = _a.returnPartialData,\n        returnPartialData = _c === void 0 ? true : _c,\n        _d = _a.canonizeResults,\n        canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var rootRef = makeReference(rootId);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: canonicalStringify(variables),\n        canonizeResults: canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query))\n      }\n    });\n    var missing;\n\n    if (execResult.missing) {\n      missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];\n\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing: missing\n    };\n  };\n\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n      };\n    }\n\n    var variables = context.variables,\n        policies = context.policies,\n        store = context.store;\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n    var objectsToMerge = [];\n    var missing;\n    var missingMerger = new DeepMerger();\n\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function handleMissing(result, resultName) {\n      var _a;\n\n      if (result.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n      }\n\n      return result.result;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a, _b;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n          }\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef: enclosingRef,\n            context: context\n          }), resultName);\n        } else if (!selection.selectionSet) {\n          if (context.canonizeResults) {\n            fieldValue = _this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context: context\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    var result = mergeDeepArray(objectsToMerge);\n    var finalResult = {\n      result: result,\n      missing: missing\n    };\n    var frozen = context.canonizeResults ? this.canon.admit(finalResult) : maybeDeepFreeze(finalResult);\n\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  };\n\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n    var missing;\n    var missingMerger = new DeepMerger();\n\n    function handleMissing(childResult, i) {\n      var _a;\n\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n      }\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n\n      if (isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          enclosingRef: enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction firstMissing(tree) {\n  try {\n    JSON.stringify(tree, function (_, value) {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (isNonNullObject(value)) {\n        __DEV__ ? invariant(!isReference(value), \"Missing selection set for object of type \".concat(getTypenameFromStoreObject(store, value), \" returned for query field \").concat(field.name.value)) : invariant(!isReference(value), 5);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/readFromStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject, isArray, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError, MissingTree } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables,\n      )];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, { [resultName]: result.missing });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${\n                selection.name.value\n              }' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`\n            });\n          }\n\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }), resultName);\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}