{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n\n      try {\n        const provider = new providers.PocketProvider(network, options.pocket);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providers.AnkrProvider && options.ankr !== \"-\") {\n      try {\n        const skip = [\"ropsten\"];\n        const provider = new providers.AnkrProvider(network, options.ankr);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\",\n    _defaultProvider: ethDefaultProvider(\"matic\")\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\",\n    _defaultProvider: ethDefaultProvider(\"optimism\")\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}