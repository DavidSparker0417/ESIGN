{"ast":null,"code":"\"use strict\";\n\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // These are load-balancer-based application IDs\n\nconst defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n  constructor(network, apiKey) {\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      const n = getStatic(new.target, \"getNetwork\")(network);\n\n      if (n) {\n        const applicationId = defaultApplicationIds[n.name];\n\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      } // If there was any issue above, we don't know this network\n\n\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n\n    super(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    // Most API Providers allow null to get the default configuration, but\n    // Pocket requires the network to decide the default provider, so we\n    // rely on hijacking the constructor to add a sensible default for us\n    if (apiKey == null) {\n      logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n    }\n\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: false,\n      applicationSecretKey: null\n    }; // Parse applicationId and applicationSecretKey\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else if (apiKey.applicationId) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    let url = null;\n\n    if (apiKey.loadBalancer) {\n      url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    } else {\n      url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n    }\n\n    const connection = {\n      url\n    }; // Initialize empty headers\n\n    connection.headers = {}; // Apply application secret key\n\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationIds[this.network.name];\n  }\n\n}","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = getStatic(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}