{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, isNonNullObject, stringifyForDisplay } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject, isArray } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from \"./key-extractor.js\";\ngetStoreKeyName.setStringify(canonicalStringify);\n\nfunction argsFromFieldSpecifier(spec) {\n  return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nvar nullKeyFieldsFn = function () {\n  return void 0;\n};\n\nvar simpleKeyArgsFn = function (_args, context) {\n  return context.fieldName;\n};\n\nvar mergeTrueFn = function (existing, incoming, _a) {\n  var mergeObjects = _a.mergeObjects;\n  return mergeObjects(existing, incoming);\n};\n\nvar mergeFalseFn = function (_, incoming) {\n  return incoming;\n};\n\nvar Policies = function () {\n  function Policies(config) {\n    this.config = config;\n    this.typePolicies = Object.create(null);\n    this.toBeAdded = Object.create(null);\n    this.supertypeMap = new Map();\n    this.fuzzySubtypes = new Map();\n    this.rootIdsByTypename = Object.create(null);\n    this.rootTypenamesById = Object.create(null);\n    this.usingPossibleTypes = false;\n    this.config = __assign({\n      dataIdFromObject: defaultDataIdFromObject\n    }, config);\n    this.cache = this.config.cache;\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  Policies.prototype.identify = function (object, partialContext) {\n    var _a;\n\n    var policies = this;\n    var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    var storeObject = partialContext && partialContext.storeObject || object;\n\n    var context = __assign(__assign({}, partialContext), {\n      typename: typename,\n      storeObject: storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        var options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables\n        });\n      }\n    });\n\n    var id;\n    var policy = typename && this.getTypePolicy(typename);\n    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n\n    while (keyFn) {\n      var specifierOrId = keyFn(object, context);\n\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  };\n\n  Policies.prototype.addTypePolicies = function (typePolicies) {\n    var _this = this;\n\n    Object.keys(typePolicies).forEach(function (typename) {\n      var _a = typePolicies[typename],\n          queryType = _a.queryType,\n          mutationType = _a.mutationType,\n          subscriptionType = _a.subscriptionType,\n          incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n\n      if (queryType) _this.setRootTypename(\"Query\", typename);\n      if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(_this.toBeAdded, typename)) {\n        _this.toBeAdded[typename].push(incoming);\n      } else {\n        _this.toBeAdded[typename] = [incoming];\n      }\n    });\n  };\n\n  Policies.prototype.updateTypePolicy = function (typename, incoming) {\n    var _this = this;\n\n    var existing = this.getTypePolicy(typename);\n    var keyFields = incoming.keyFields,\n        fields = incoming.fields;\n\n    function setMerge(existing, merge) {\n      existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n    }\n\n    setMerge(existing, incoming.merge);\n    existing.keyFn = keyFields === false ? nullKeyFieldsFn : isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(function (fieldName) {\n        var existing = _this.getFieldPolicy(typename, fieldName, true);\n\n        var incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          var keyArgs = incoming.keyArgs,\n              read = incoming.read,\n              merge = incoming.merge;\n          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  };\n\n  Policies.prototype.setRootTypename = function (which, typename) {\n    if (typename === void 0) {\n      typename = which;\n    }\n\n    var rootId = \"ROOT_\" + which.toUpperCase();\n    var old = this.rootTypenamesById[rootId];\n\n    if (typename !== old) {\n      __DEV__ ? invariant(!old || old === which, \"Cannot change root \".concat(which, \" __typename more than once\")) : invariant(!old || old === which, 3);\n      if (old) delete this.rootIdsByTypename[old];\n      this.rootIdsByTypename[typename] = rootId;\n      this.rootTypenamesById[rootId] = typename;\n    }\n  };\n\n  Policies.prototype.addPossibleTypes = function (possibleTypes) {\n    var _this = this;\n\n    this.usingPossibleTypes = true;\n    Object.keys(possibleTypes).forEach(function (supertype) {\n      _this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(function (subtype) {\n        _this.getSupertypeSet(subtype, true).add(supertype);\n\n        var match = subtype.match(TypeOrFieldNameRegExp);\n\n        if (!match || match[0] !== subtype) {\n          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  };\n\n  Policies.prototype.getTypePolicy = function (typename) {\n    var _this = this;\n\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      var policy_1 = this.typePolicies[typename] = Object.create(null);\n      policy_1.fields = Object.create(null);\n      var supertypes = this.supertypeMap.get(typename);\n\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(function (supertype) {\n          var _a = _this.getTypePolicy(supertype),\n              fields = _a.fields,\n              rest = __rest(_a, [\"fields\"]);\n\n          Object.assign(policy_1, rest);\n          Object.assign(policy_1.fields, fields);\n        });\n      }\n    }\n\n    var inbox = this.toBeAdded[typename];\n\n    if (inbox && inbox.length) {\n      inbox.splice(0).forEach(function (policy) {\n        _this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  };\n\n  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n    if (typename) {\n      var fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n    }\n  };\n\n  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n    var supertypeSet = this.supertypeMap.get(subtype);\n\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set());\n    }\n\n    return supertypeSet;\n  };\n\n  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n    var _this = this;\n\n    if (!fragment.typeCondition) return true;\n    if (!typename) return false;\n    var supertype = fragment.typeCondition.name.value;\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n      var workQueue_1 = [typenameSupertypeSet];\n\n      var maybeEnqueue_1 = function (subtype) {\n        var supertypeSet = _this.getSupertypeSet(subtype, false);\n\n        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n          workQueue_1.push(supertypeSet);\n        }\n      };\n\n      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      var checkingFuzzySubtypes = false;\n\n      for (var i = 0; i < workQueue_1.length; ++i) {\n        var supertypeSet = workQueue_1[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              __DEV__ && invariant.warn(\"Inferring subtype \".concat(typename, \" of supertype \").concat(supertype));\n            }\n\n            typenameSupertypeSet.add(supertype);\n          }\n\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue_1);\n\n        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n            var match = typename.match(regExp);\n\n            if (match && match[0] === typename) {\n              maybeEnqueue_1(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  };\n\n  Policies.prototype.getStoreFieldName = function (fieldSpec) {\n    var typename = fieldSpec.typename,\n        fieldName = fieldSpec.fieldName;\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    var storeFieldName;\n    var keyFn = policy && policy.keyFn;\n\n    if (keyFn && typename) {\n      var context = {\n        typename: typename,\n        fieldName: fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables\n      };\n      var args = argsFromFieldSpecifier(fieldSpec);\n\n      while (keyFn) {\n        var specifierOrString = keyFn(args, context);\n\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n  };\n\n  Policies.prototype.readField = function (options, context) {\n    var objectOrReference = options.from;\n    if (!objectOrReference) return;\n    var nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    var storeFieldName = this.getStoreFieldName(options);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n    var policy = this.getFieldPolicy(options.typename, fieldName, false);\n    var read = policy && policy.read;\n\n    if (read) {\n      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n    }\n\n    return existing;\n  };\n\n  Policies.prototype.getReadFunction = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  };\n\n  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n    var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n    var merge = policy && policy.merge;\n\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n\n    return merge;\n  };\n\n  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n    var field = _a.field,\n        typename = _a.typename,\n        merge = _a.merge;\n\n    if (merge === mergeTrueFn) {\n      return makeMergeObjectsFunction(context.store)(existing, incoming);\n    }\n\n    if (merge === mergeFalseFn) {\n      return incoming;\n    }\n\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {\n      typename: typename,\n      fieldName: field.name.value,\n      field: field,\n      variables: context.variables\n    }, context, storage || Object.create(null)));\n  };\n\n  return Policies;\n}();\n\nexport { Policies };\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n  var storeFieldName = policies.getStoreFieldName(fieldSpec);\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var variables = fieldSpec.variables || context.variables;\n  var _a = context.store,\n      toReference = _a.toReference,\n      canRead = _a.canRead;\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName: fieldName,\n    storeFieldName: storeFieldName,\n    variables: variables,\n    isReference: isReference,\n    toReference: toReference,\n    storage: storage,\n    cache: policies.cache,\n    canRead: canRead,\n    readField: function () {\n      return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store)\n  };\n}\n\nexport function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n  var fieldNameOrOptions = readFieldArgs[0],\n      from = readFieldArgs[1],\n      argc = readFieldArgs.length;\n  var options;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      from: argc > 1 ? from : objectOrReference\n    };\n  } else {\n    options = __assign({}, fieldNameOrOptions);\n\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    __DEV__ && invariant.warn(\"Undefined 'from' passed to readField with arguments \".concat(stringifyForDisplay(Array.from(readFieldArgs))));\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(store) {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw __DEV__ ? new InvariantError(\"Cannot automatically merge arrays\") : new InvariantError(4);\n    }\n\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      var eType = store.getFieldValue(existing, \"__typename\");\n      var iType = store.getFieldValue(incoming, \"__typename\");\n      var typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) && storeValueIsStoreObject(incoming)) {\n        return __assign(__assign({}, existing), incoming);\n      }\n    }\n\n    return incoming;\n  };\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/policies.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  FragmentMap,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n  isArray,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from './key-extractor';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>,\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename = partialContext && (\n      partialContext.typename ||\n      partialContext.storeObject?.__typename\n    ) || object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject = partialContext && partialContext.storeObject || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        const options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables,\n        });\n      },\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string,\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>() {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(arguments, objectOrReference, variables),\n        context,\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: IArguments,\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"],\n): ReadFieldOptions {\n  const {\n    0: fieldNameOrOptions,\n    1: from,\n    length: argc,\n  } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(`Undefined 'from' passed to readField with arguments ${\n      stringifyForDisplay(Array.from(readFieldArgs))\n    }`);\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}