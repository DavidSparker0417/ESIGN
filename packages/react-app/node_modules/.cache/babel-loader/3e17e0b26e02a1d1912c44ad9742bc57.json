{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a, _b, _c;\n\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state;\n\n      if (action.blockNumber === current) {\n        // merge with existing state to prevent requests coming out of order\n        // from overwriting the data\n        const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n        for (const [address, entries] of Object.entries(oldState)) {\n          newState = Object.assign(Object.assign({}, newState), {\n            [address]: Object.assign(Object.assign({}, entries), newState[address])\n          });\n        }\n      }\n\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/chainStateReducer.ts"],"names":[],"mappings":"AAkCA;;AAEG;AACH,OAAM,SAAU,iBAAV,GAAuE;EAAA,IAA3C,KAA2C,uEAA5B,EAA4B;EAAA,IAAxB,MAAwB;;;;EAC3E,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAR,CAAL,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,WAAvC;;EACA,IAAI,CAAC,OAAD,IAAY,MAAM,CAAC,WAAP,IAAsB,OAAtC,EAA+C;IAC7C,IAAI,MAAM,CAAC,IAAP,KAAgB,eAApB,EAAqC;MACnC,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAtB;;MACA,IAAI,MAAM,CAAC,WAAP,KAAuB,OAA3B,EAAoC;QAClC;QACA;QACA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAR,CAAL,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,KAAvB,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,EAA5B,GAAgC,EAAjD;;QACA,KAAK,MAAM,CAAC,OAAD,EAAU,OAAV,CAAX,IAAiC,MAAM,CAAC,OAAP,CAAe,QAAf,CAAjC,EAA2D;UACzD,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,QADG,CAAA,EACK;YACX,CAAC,OAAD,GAAS,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,OADI,CAAA,EAEJ,QAAQ,CAAC,OAAD,CAFJ;UADE,CADL,CAAR;QAOD;MACF;;MACD,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;QACR,CAAC,MAAM,CAAC,OAAR,GAAkB;UAAE,WAAW,EAAE,MAAM,CAAC,WAAtB;UAAmC,KAAK,EAAE;QAA1C;MADV,CADV,CAAA;IAID,CApBD,MAoBO,IAAI,MAAM,CAAC,IAAP,KAAgB,aAApB,EAAmC;MACxC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;QACR,CAAC,MAAM,CAAC,OAAR,GAAgB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAR,CAAZ,CAAA,EAA4B;UAAE,WAAW,EAAE,MAAM,CAAC,WAAtB;UAAmC,KAAK,EAAE,MAAM,CAAC;QAAjD,CAA5B;MADR,CADV,CAAA;IAID;EACF;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            if (action.blockNumber === current) {\n                // merge with existing state to prevent requests coming out of order\n                // from overwriting the data\n                const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n                for (const [address, entries] of Object.entries(oldState)) {\n                    newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n                }\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}