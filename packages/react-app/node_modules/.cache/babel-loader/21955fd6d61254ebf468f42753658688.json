{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.alchemyapi.io/v2/\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.alchemyapi.io/v2/\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.alchemyapi.io/v2/\";\n        break;\n\n      case \"kovan\":\n        host = \"eth-kovan.alchemyapi.io/v2/\";\n        break;\n\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n\n      case \"arbitrum\":\n        host = \"arb-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"arbitrum-rinkeby\":\n        host = \"arb-rinkeby.g.alchemy.com/v2/\";\n        break;\n\n      case \"optimism\":\n        host = \"opt-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"optimism-kovan\":\n        host = \"opt-kovan.g.alchemy.com/v2/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/alchemy-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=alchemy-provider.js.map"]},"metadata":{},"sourceType":"module"}