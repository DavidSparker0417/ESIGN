{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nconst ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\n\nexport async function multicall(provider, address, blockNumber, requests) {\n  var _a;\n\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const [, results] = await contract.aggregate(requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const result = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,0BAAzB;AAKA,MAAM,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA;;AAEG;;AACH,OAAO,eAAe,SAAf,CACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK,EAIc;;;EAEnB,IAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CAAjB;EACA,MAAM,GAAG,OAAH,IAAqC,MAAM,QAAQ,CAAC,SAAT,CAC/C,QAAQ,CAAC,GAAT,CAAa;IAAA,IAAC;MAAE,OAAF;MAAW;IAAX,CAAD;IAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;EAAA,CAAb,CAD+C,EAE/C;IAAE,QAAQ,EAAE;EAAZ,CAF+C,CAAjD;EAIA,MAAM,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,MAAM;MAAE,OAAF;MAAW;IAAX,IAAoB,QAAQ,CAAC,CAAD,CAAlC;IACA,MAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;IACA,MAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAD,CAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EAA1C;IACA,eAAe,CAAC,IAAD,CAAf,GAAwB;MAAE,KAAK,EAAE,MAAT;MAAiB,OAAO,EAAE;IAA1B,CAAxB;IACA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;EACD;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n    var _a;\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { value: result, success: true };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}