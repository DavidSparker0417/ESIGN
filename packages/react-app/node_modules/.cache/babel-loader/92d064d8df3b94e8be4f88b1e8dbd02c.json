{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n        error = observer.error,\n        complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    var promiseQueue = {\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n\n          var both = function () {\n            return examiner(arg);\n          };\n\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n\n            if (completed) {\n              handler.complete();\n            }\n          }, function (error) {\n            --activeCallbackCount;\n            throw error;\n          }).catch(function (caught) {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/asyncMap.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAAqC,iBAArC;AAIA,OAAM,SAAU,QAAV,CACJ,UADI,EAEJ,KAFI,EAGJ,OAHI,EAGwC;EAE5C,OAAO,IAAI,UAAJ,CAAkB,UAAA,QAAA,EAAQ;IACvB,IAAA,IAAI,GAAsB,QAAQ,CAA9B,IAAJ;IAAA,IAAM,KAAK,GAAe,QAAQ,CAAvB,KAAX;IAAA,IAAa,QAAQ,GAAK,QAAQ,CAAb,QAArB;IACR,IAAI,mBAAmB,GAAG,CAA1B;IACA,IAAI,SAAS,GAAG,KAAhB;IACA,IAAI,YAAY,GAAG;MAIjB,IAAI,EAAJ,UAAK,QAAL,EAAwB;QACtB,OAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;UAAI,OAAA,OAAO,CAAC,QAAR,EAAO,CAAP;QAAmB,CAA1C,CAAP;MACD;IANgB,CAAnB;;IASA,SAAS,YAAT,CACE,QADF,EAEE,QAFF,EAEsC;MAEpC,IAAI,QAAJ,EAAc;QACZ,OAAO,UAAA,GAAA,EAAG;UACR,EAAE,mBAAF;;UACA,IAAM,IAAI,GAAG,YAAA;YAAM,OAAA,QAAQ,CAAR,GAAQ,CAAR;UAAa,CAAhC;;UACA,YAAY,GAAG,YAAY,CAAC,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,CACb,UAAA,MAAA,EAAM;YACJ,EAAE,mBAAF;YACA,IAAI,IAAI,IAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,MAApB,CAAR;;YACA,IAAI,SAAJ,EAAe;cACb,OAAO,CAAC,QAAR;YACD;UACF,CAPY,EAQb,UAAA,KAAA,EAAK;YACH,EAAE,mBAAF;YACA,MAAM,KAAN;UACD,CAXY,EAYb,KAZa,CAYP,UAAA,MAAA,EAAM;YACZ,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,MAArB,CAAT;UACD,CAdc,CAAf;QAeD,CAlBD;MAmBD,CApBD,MAoBO;QACL,OAAO,UAAA,GAAA,EAAG;UAAI,OAAA,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,EAAZ,GAAY,CAAZ;QAAwC,CAAtD;MACD;IACF;;IAED,IAAM,OAAO,GAAgB;MAC3B,IAAI,EAAE,YAAY,CAAC,KAAD,EAAQ,IAAR,CADS;MAE3B,KAAK,EAAE,YAAY,CAAC,OAAD,EAAU,KAAV,CAFQ;MAG3B,QAAQ,EAAA,YAAA;QACN,SAAS,GAAG,IAAZ;;QACA,IAAI,CAAC,mBAAL,EAA0B;UACxB,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAZ;QACD;MACF;IAR0B,CAA7B;IAWA,IAAM,GAAG,GAAG,UAAU,CAAC,SAAX,CAAqB,OAArB,CAAZ;IACA,OAAO,YAAA;MAAM,OAAA,GAAG,CAAH,WAAA,EAAA;IAAiB,CAA9B;EACD,CAvDM,CAAP;AAwDD","sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}