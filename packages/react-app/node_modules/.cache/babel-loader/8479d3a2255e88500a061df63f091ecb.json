{"ast":null,"code":"import { useBlockNumber } from '../providers/blockNumber/blockNumber/context';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers';\n/**\n * @public\n */\n\nexport function useGasPrice() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n\n  const _blockNumber = useBlockNumber();\n\n  const blockNumbers = useBlockNumbers();\n  const [gasPrice, setGasPrice] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber]);\n\n  async function updateGasPrice() {\n    setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n  }\n\n  useEffect(() => {\n    updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"sources":["../../../../src/hooks/useGasPrice.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,8CAA/B;AAEA,SAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,QAA6C,OAA7C;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,mBAAT,QAAoC,uCAApC;AACA,SAAS,eAAT,QAAgC,uCAAhC;AAGA;;AAEG;;AACH,OAAM,SAAU,WAAV,GAAmD;EAAA,IAA7B,WAA6B,uEAAF,EAAE;EACvD,MAAM;IAAE;EAAF,IAAc,SAAS,EAA7B;EACA,MAAM,SAAS,GAAG,mBAAmB,EAArC;;EACA,MAAM,YAAY,GAAG,cAAc,EAAnC;;EACA,MAAM,YAAY,GAAG,eAAe,EAApC;EAEA,MAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,QAAQ,EAAxC;EAEA,MAAM;IAAE;EAAF,IAAc,WAApB;EAEA,MAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,OAAO,CACrC,MAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAD,CAAV,EAAqB,YAAY,CAAC,OAAD,CAAjC,CAAH,GAAiD,CAAC,OAAD,EAAU,YAAV,CAD1B,EAErC,CAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB,EAAmC,YAAnC,CAFqC,CAAvC;;EAKA,eAAe,cAAf,GAA6B;IAC3B,WAAW,CAAC,OAAM,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,WAAV,EAAN,CAAD,CAAX;EACD;;EAED,SAAS,CAAC,MAAK;IACb,cAAc;EACf,CAFQ,EAEN,CAAC,QAAD,EAAW,WAAX,CAFM,CAAT;EAIA,OAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import { useBlockNumber } from '../providers/blockNumber/blockNumber/context';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers';\n/**\n * @public\n */\nexport function useGasPrice(queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [gasPrice, setGasPrice] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber]);\n    async function updateGasPrice() {\n        setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n    }\n    useEffect(() => {\n        updateGasPrice();\n    }, [provider, blockNumber]);\n    return gasPrice;\n}\n//# sourceMappingURL=useGasPrice.js.map"]},"metadata":{},"sourceType":"module"}