{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n\n    _this.link = link;\n    return _this;\n  }\n\n  return LinkError;\n}(Error);\n\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n\n    if (isTerminating(firstLink)) {\n      __DEV__ && invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n      return firstLink;\n    }\n\n    var nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(19);\n  };\n\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error);\n      return false;\n    }\n\n    throw error;\n  };\n\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n\n  return ApolloLink;\n}();\n\nexport { ApolloLink };","map":{"version":3,"sources":["../../../src/link/core/ApolloLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}