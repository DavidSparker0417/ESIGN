{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\n\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  const {\n    chainId: providerChainId\n  } = useEthers();\n  const [tokenList, setTokenList] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    fetch(tokenListURI).then(async response => {\n      if (response.ok) {\n        const {\n          name,\n          logoURI,\n          tokens\n        } = await response.json();\n        setTokenList({\n          name,\n          logoURI,\n          tokens: tokens.filter(token => {\n            const sameChainId = token.chainId === chainId;\n\n            if (!tags) {\n              return sameChainId;\n            }\n\n            return sameChainId && token.tags && token.tags.some(tag => tags.includes(tag));\n          })\n        });\n      } else {\n        const errorMessage = await response.text();\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"sources":["../../../../src/hooks/useTokenList.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AAEA,SAAS,SAAT,QAA0B,aAA1B;AAWA;;AAEG;;AACH,OAAM,SAAU,YAAV,CAAuB,YAAvB,EAA6C,eAA7C,EAAuE,IAAvE,EAAsF;EAC1F,MAAM;IAAE,OAAO,EAAE;EAAX,IAA+B,SAAS,EAA9C;EACA,MAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,EAA1C;EAEA,MAAM,OAAO,GAAG,eAAe,IAAI,eAAnC;EAEA,SAAS,CAAC,MAAK;IACb,KAAK,CAAC,YAAD,CAAL,CACG,IADH,CACQ,MAAO,QAAP,IAAmB;MACvB,IAAI,QAAQ,CAAC,EAAb,EAAiB;QACf,MAAM;UAAE,IAAF;UAAQ,OAAR;UAAiB;QAAjB,IAA4B,MAAM,QAAQ,CAAC,IAAT,EAAxC;QACA,YAAY,CAAC;UACX,IADW;UAEX,OAFW;UAGX,MAAM,EAAG,MAAsB,CAAC,MAAvB,CAA+B,KAAD,IAAU;YAC/C,MAAM,WAAW,GAAG,KAAK,CAAC,OAAN,KAAkB,OAAtC;;YACA,IAAI,CAAC,IAAL,EAAW;cACT,OAAO,WAAP;YACD;;YACD,OAAO,WAAW,IAAI,KAAK,CAAC,IAArB,IAA6B,KAAK,CAAC,IAAN,CAAW,IAAX,CAAiB,GAAD,IAAS,IAAI,CAAC,QAAL,CAAc,GAAd,CAAzB,CAApC;UACD,CANQ;QAHE,CAAD,CAAZ;MAWD,CAbD,MAaO;QACL,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAT,EAA3B;QACA,OAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,YAAV,CAAf,CAAP;MACD;IACF,CAnBH,EAoBG,KApBH,CAoBU,GAAD,IAAQ;MACb,OAAO,CAAC,GAAR,CAAY,GAAZ;MACA,YAAY,CAAC,SAAD,CAAZ;IACD,CAvBH;EAwBD,CAzBQ,EAyBN,CAAC,YAAD,EAAe,OAAf,CAzBM,CAAT;EA2BA,OAAO,SAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n    const { chainId: providerChainId } = useEthers();\n    const [tokenList, setTokenList] = useState();\n    const chainId = overrideChainId || providerChainId;\n    useEffect(() => {\n        fetch(tokenListURI)\n            .then(async (response) => {\n            if (response.ok) {\n                const { name, logoURI, tokens } = await response.json();\n                setTokenList({\n                    name,\n                    logoURI,\n                    tokens: tokens.filter((token) => {\n                        const sameChainId = token.chainId === chainId;\n                        if (!tags) {\n                            return sameChainId;\n                        }\n                        return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag));\n                    }),\n                });\n            }\n            else {\n                const errorMessage = await response.text();\n                return Promise.reject(new Error(errorMessage));\n            }\n        })\n            .catch((err) => {\n            console.log(err);\n            setTokenList(undefined);\n        });\n    }, [tokenListURI, chainId]);\n    return tokenList;\n}\n//# sourceMappingURL=useTokenList.js.map"]},"metadata":{},"sourceType":"module"}