{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\n\nfunction lookupSpecifierInfo(spec) {\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n\n      __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n        variables = _a.variables,\n        fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n        }\n\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n\n    var toMerge = extractor(path);\n\n    if (toMerge !== void 0) {\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n\n      collected = merger.merge(collected, toMerge);\n    }\n\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths;\n}\n\nfunction extractKey(object, key) {\n  return object[key];\n}\n\nexport function extractKeyPath(object, path, extract) {\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\n\nfunction normalize(value) {\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/key-extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities\";\n\nimport { hasOwn, isArray } from \"./helpers\";\nimport {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<string, {\n  paths?: string[][];\n  keyFieldsFn?: KeyFieldsFunction;\n  keyArgsFn?: KeyArgsFunction;\n}> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyFieldsFn || (info.keyFieldsFn = (\n    object,\n    context,\n  ) => {\n    const extract: typeof extractKey =\n      (from, key) => context.readField(key, from);\n\n    const keyObject = context.keyObject = collectSpecifierPaths(\n      specifier,\n      schemaKeyPath => {\n        let extracted = extractKeyPath(\n          context.storeObject,\n          schemaKeyPath,\n          // Using context.readField to extract paths from context.storeObject\n          // allows the extraction to see through Reference objects and respect\n          // custom read functions.\n          extract,\n        );\n\n        if (\n          extracted === void 0 &&\n          object !== context.storeObject &&\n          hasOwn.call(object, schemaKeyPath[0])\n        ) {\n          // If context.storeObject fails to provide a value for the requested\n          // path, fall back to the raw result object, if it has a top-level key\n          // matching the first key in the path (schemaKeyPath[0]). This allows\n          // key fields included in the written data to be saved in the cache\n          // even if they are not selected explicitly in context.selectionSet.\n          // Not being mentioned by context.selectionSet is convenient here,\n          // since it means these extra fields cannot be affected by field\n          // aliasing, which is why we can use extractKey instead of\n          // context.readField for this extraction.\n          extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n        }\n\n        invariant(\n          extracted !== void 0,\n          `Missing field '${schemaKeyPath.join('.')}' while extracting keyFields from ${\n            JSON.stringify(object)\n          }`,\n        );\n\n        return extracted;\n      },\n    );\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  });\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier: KeySpecifier): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyArgsFn || (info.keyArgsFn = (args, {\n    field,\n    variables,\n    fieldName,\n  }) => {\n    const collected = collectSpecifierPaths(specifier, keyPath => {\n      const firstKey = keyPath[0];\n      const firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          const directiveName = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          const d = field.directives.find(d => d.name.value === directiveName);\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          const directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(\n            directiveArgs,\n            // If keyPath.length === 1, this code calls extractKeyPath with an\n            // empty path, which works because it uses directiveArgs as the\n            // extracted value.\n            keyPath.slice(1),\n          );\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        const variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          const varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n\n    const suffix = JSON.stringify(collected);\n\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any,\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger;\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = info.paths = [];\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(p => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<\n  TObj extends Record<string, any>,\n  TKey extends string,\n>(object: TObj, key: TKey): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey,\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key): any {\n    return isArray(obj)\n      ? obj.map(child => reducer(child, key))\n      : obj && extract!(obj, key);\n  }, object));\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(\n      Object.keys(value).sort(),\n      path => extractKeyPath(value, path),\n    ) as T;\n  }\n  return value;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}