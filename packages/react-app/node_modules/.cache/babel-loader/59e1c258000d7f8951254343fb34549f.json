{"ast":null,"code":"import { Web3Provider } from '@ethersproject/providers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nexport async function getInjectedProvider(pollingInterval) {\n  const injectedProvider = await detectEthereumProvider();\n\n  if (!injectedProvider) {\n    return undefined;\n  }\n\n  const provider = new Web3Provider(injectedProvider, 'any');\n  provider.pollingInterval = pollingInterval;\n  return provider;\n}","map":{"version":3,"sources":["../../../../src/helpers/injectedProvider.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,0BAA7B;AACA,OAAO,sBAAP,MAAmC,2BAAnC;AAEA,OAAO,eAAe,mBAAf,CAAmC,eAAnC,EAA0D;EAC/D,MAAM,gBAAgB,GAAQ,MAAM,sBAAsB,EAA1D;;EACA,IAAI,CAAC,gBAAL,EAAuB;IACrB,OAAO,SAAP;EACD;;EAED,MAAM,QAAQ,GAAG,IAAI,YAAJ,CAAiB,gBAAjB,EAAmC,KAAnC,CAAjB;EACA,QAAQ,CAAC,eAAT,GAA2B,eAA3B;EACA,OAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nexport async function getInjectedProvider(pollingInterval) {\n    const injectedProvider = await detectEthereumProvider();\n    if (!injectedProvider) {\n        return undefined;\n    }\n    const provider = new Web3Provider(injectedProvider, 'any');\n    provider.pollingInterval = pollingInterval;\n    return provider;\n}\n//# sourceMappingURL=injectedProvider.js.map"]},"metadata":{},"sourceType":"module"}