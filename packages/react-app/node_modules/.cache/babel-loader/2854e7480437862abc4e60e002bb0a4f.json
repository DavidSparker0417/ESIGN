{"ast":null,"code":"import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n\n    if (this._pendingBatch == null) {\n      this._pendingBatch = [];\n    }\n\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this._pendingBatch.push(inflightRequest);\n\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        // Get teh current batch and clear it, so new requests\n        // go into the next batch\n        const batch = this._pendingBatch;\n        this._pendingBatch = null;\n        this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n        const request = batch.map(inflight => inflight.request);\n        this.emit(\"debug\", {\n          action: \"requestBatch\",\n          request: deepCopy(request),\n          provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request)).then(result => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: request,\n            response: result,\n            provider: this\n          }); // For each result, feed it to the correct Promise, depending\n          // on whether it was a success or error\n\n          batch.forEach((inflightRequest, index) => {\n            const payload = result[index];\n\n            if (payload.error) {\n              const error = new Error(payload.error.message);\n              error.code = payload.error.code;\n              error.data = payload.error.data;\n              inflightRequest.reject(error);\n            } else {\n              inflightRequest.resolve(payload.result);\n            }\n          });\n        }, error => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: request,\n            provider: this\n          });\n          batch.forEach(inflightRequest => {\n            inflightRequest.reject(error);\n          });\n        });\n      }, 10);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/json-rpc-batch-provider.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,2BAAzB;AACA,SAAS,SAAT,QAA0B,oBAA1B;AAEA,SAAS,eAAT,QAAgC,qBAAhC,C,CAEA;;AAEA,OAAM,MAAO,oBAAP,SAAoC,eAApC,CAAmD;EAQrD,IAAI,CAAC,MAAD,EAAiB,MAAjB,EAAmC;IACnC,MAAM,OAAO,GAAG;MACZ,MAAM,EAAE,MADI;MAEZ,MAAM,EAAE,MAFI;MAGZ,EAAE,EAAG,KAAK,OAAL,EAHO;MAIZ,OAAO,EAAE;IAJG,CAAhB;;IAOA,IAAI,KAAK,aAAL,IAAsB,IAA1B,EAAgC;MAC5B,KAAK,aAAL,GAAqB,EAArB;IACH;;IAED,MAAM,eAAe,GAAQ;MAAE,OAAF;MAAW,OAAO,EAAE,IAApB;MAA0B,MAAM,EAAE;IAAlC,CAA7B;IAEA,MAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;MAC5C,eAAe,CAAC,OAAhB,GAA0B,OAA1B;MACA,eAAe,CAAC,MAAhB,GAAyB,MAAzB;IACH,CAHe,CAAhB;;IAKA,KAAK,aAAL,CAAmB,IAAnB,CAAwB,eAAxB;;IAEA,IAAI,CAAC,KAAK,uBAAV,EAAmC;MAC/B;MACA,KAAK,uBAAL,GAA+B,UAAU,CAAC,MAAK;QAE3C;QACA;QACA,MAAM,KAAK,GAAG,KAAK,aAAnB;QACA,KAAK,aAAL,GAAqB,IAArB;QACA,KAAK,uBAAL,GAA+B,IAA/B,CAN2C,CAQ3C;;QACA,MAAM,OAAO,GAAG,KAAK,CAAC,GAAN,CAAW,QAAD,IAAc,QAAQ,CAAC,OAAjC,CAAhB;QAEA,KAAK,IAAL,CAAU,OAAV,EAAmB;UACf,MAAM,EAAE,cADO;UAEf,OAAO,EAAE,QAAQ,CAAC,OAAD,CAFF;UAGf,QAAQ,EAAE;QAHK,CAAnB;QAMA,OAAO,SAAS,CAAC,KAAK,UAAN,EAAkB,IAAI,CAAC,SAAL,CAAe,OAAf,CAAlB,CAAT,CAAoD,IAApD,CAA0D,MAAD,IAAW;UACvE,KAAK,IAAL,CAAU,OAAV,EAAmB;YACf,MAAM,EAAE,UADO;YAEf,OAAO,EAAE,OAFM;YAGf,QAAQ,EAAE,MAHK;YAIf,QAAQ,EAAE;UAJK,CAAnB,EADuE,CAQvE;UACA;;UACA,KAAK,CAAC,OAAN,CAAc,CAAC,eAAD,EAAkB,KAAlB,KAA2B;YACrC,MAAM,OAAO,GAAG,MAAM,CAAC,KAAD,CAAtB;;YACA,IAAI,OAAO,CAAC,KAAZ,EAAmB;cACf,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAO,CAAC,KAAR,CAAc,OAAxB,CAAd;cACM,KAAM,CAAC,IAAP,GAAc,OAAO,CAAC,KAAR,CAAc,IAA5B;cACA,KAAM,CAAC,IAAP,GAAc,OAAO,CAAC,KAAR,CAAc,IAA5B;cACN,eAAe,CAAC,MAAhB,CAAuB,KAAvB;YACH,CALD,MAKO;cACH,eAAe,CAAC,OAAhB,CAAwB,OAAO,CAAC,MAAhC;YACH;UACJ,CAVD;QAYH,CAtBM,EAsBH,KAAD,IAAU;UACT,KAAK,IAAL,CAAU,OAAV,EAAmB;YACf,MAAM,EAAE,UADO;YAEf,KAAK,EAAE,KAFQ;YAGf,OAAO,EAAE,OAHM;YAIf,QAAQ,EAAE;UAJK,CAAnB;UAOA,KAAK,CAAC,OAAN,CAAe,eAAD,IAAoB;YAC9B,eAAe,CAAC,MAAhB,CAAuB,KAAvB;UACH,CAFD;QAGH,CAjCM,CAAP;MAmCH,CApDwC,EAoDtC,EApDsC,CAAzC;IAqDH;;IAED,OAAO,OAAP;EACH;;AAvFoD","sourceRoot":"","sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map"]},"metadata":{},"sourceType":"module"}