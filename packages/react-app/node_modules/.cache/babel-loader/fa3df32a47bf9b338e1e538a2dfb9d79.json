{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Exported Types\n\nfunction hasMnemonic(value) {\n  return value != null && value.mnemonic && value.mnemonic.phrase;\n}\n\nexport class KeystoreAccount extends Description {\n  isKeystoreAccount(value) {\n    return !!(value && value._isKeystoreAccount);\n  }\n\n}\n\nfunction _decrypt(data, key, ciphertext) {\n  const cipher = searchPath(data, \"crypto/cipher\");\n\n  if (cipher === \"aes-128-ctr\") {\n    const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n    return arrayify(aesCtr.decrypt(ciphertext));\n  }\n\n  return null;\n}\n\nfunction _getAccount(data, key) {\n  const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n\n  if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n    throw new Error(\"invalid password\");\n  }\n\n  const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\n  if (!privateKey) {\n    logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"decrypt\"\n    });\n  }\n\n  const mnemonicKey = key.slice(32, 64);\n  const address = computeAddress(privateKey);\n\n  if (data.address) {\n    let check = data.address.toLowerCase();\n\n    if (check.substring(0, 2) !== \"0x\") {\n      check = \"0x\" + check;\n    }\n\n    if (getAddress(check) !== address) {\n      throw new Error(\"address mismatch\");\n    }\n  }\n\n  const account = {\n    _isKeystoreAccount: true,\n    address: address,\n    privateKey: hexlify(privateKey)\n  }; // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\n  if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n    const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n    const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n    const mnemonicCounter = new aes.Counter(mnemonicIv);\n    const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n    const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n    const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\n    try {\n      const mnemonic = entropyToMnemonic(entropy, locale);\n      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n\n      account.mnemonic = node.mnemonic;\n    } catch (error) {\n      // If we don't have the locale wordlist installed to\n      // read this mnemonic, just bail and don't set the\n      // mnemonic\n      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n        throw error;\n      }\n    }\n  }\n\n  return new KeystoreAccount(account);\n}\n\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n  return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n  const passwordBytes = getPassword(password);\n  const kdf = searchPath(data, \"crypto/kdf\");\n\n  if (kdf && typeof kdf === \"string\") {\n    const throwError = function (name, value) {\n      return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n    };\n\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n      const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n      const p = parseInt(searchPath(data, \"crypto/kdfparams/p\")); // Check for all required parameters\n\n      if (!N || !r || !p) {\n        throwError(\"kdf\", kdf);\n      } // Make sure N is a power of 2\n\n\n      if ((N & N - 1) !== 0) {\n        throwError(\"N\", N);\n      }\n\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n\n      return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      let prfFunc = null;\n      const prf = searchPath(data, \"crypto/kdfparams/prf\");\n\n      if (prf === \"hmac-sha256\") {\n        prfFunc = \"sha256\";\n      } else if (prf === \"hmac-sha512\") {\n        prfFunc = \"sha512\";\n      } else {\n        throwError(\"prf\", prf);\n      }\n\n      const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n\n      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n    }\n  }\n\n  return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\nexport function decryptSync(json, password) {\n  const data = JSON.parse(json);\n\n  const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n\n  return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const data = JSON.parse(json);\n    const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n    return _getAccount(data, key);\n  });\n}\nexport function encrypt(account, password, options, progressCallback) {\n  try {\n    // Check the address matches the private key\n    if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n      throw new Error(\"address/privateKey mismatch\");\n    } // Check the mnemonic (if any) matches the private key\n\n\n    if (hasMnemonic(account)) {\n      const mnemonic = account.mnemonic;\n      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  } // The options are optional, so adjust the call as needed\n\n\n  if (typeof options === \"function\" && !progressCallback) {\n    progressCallback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  const privateKey = arrayify(account.privateKey);\n  const passwordBytes = getPassword(password);\n  let entropy = null;\n  let path = null;\n  let locale = null;\n\n  if (hasMnemonic(account)) {\n    const srcMnemonic = account.mnemonic;\n    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n    path = srcMnemonic.path || defaultPath;\n    locale = srcMnemonic.locale || \"en\";\n  }\n\n  let client = options.client;\n\n  if (!client) {\n    client = \"ethers.js\";\n  } // Check/generate the salt\n\n\n  let salt = null;\n\n  if (options.salt) {\n    salt = arrayify(options.salt);\n  } else {\n    salt = randomBytes(32);\n    ;\n  } // Override initialization vector\n\n\n  let iv = null;\n\n  if (options.iv) {\n    iv = arrayify(options.iv);\n\n    if (iv.length !== 16) {\n      throw new Error(\"invalid iv\");\n    }\n  } else {\n    iv = randomBytes(16);\n  } // Override the uuid\n\n\n  let uuidRandom = null;\n\n  if (options.uuid) {\n    uuidRandom = arrayify(options.uuid);\n\n    if (uuidRandom.length !== 16) {\n      throw new Error(\"invalid uuid\");\n    }\n  } else {\n    uuidRandom = randomBytes(16);\n  } // Override the scrypt password-based key derivation function parameters\n\n\n  let N = 1 << 17,\n      r = 8,\n      p = 1;\n\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  } // We take 64 bytes:\n  //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\n\n  return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(key => {\n    key = arrayify(key); // This will be used to encrypt the wallet (as per Web3 secret storage)\n\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32); // This will be used to encrypt the mnemonic phrase (if any)\n\n    const mnemonicKey = key.slice(32, 64); // Encrypt the private key\n\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n    const ciphertext = arrayify(aesCtr.encrypt(privateKey)); // Compute the message authentication code, used to check the password\n\n    const mac = keccak256(concat([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\n    const data = {\n      address: account.address.substring(2).toLowerCase(),\n      id: uuidV4(uuidRandom),\n      version: 3,\n      Crypto: {\n        cipher: \"aes-128-ctr\",\n        cipherparams: {\n          iv: hexlify(iv).substring(2)\n        },\n        ciphertext: hexlify(ciphertext).substring(2),\n        kdf: \"scrypt\",\n        kdfparams: {\n          salt: hexlify(salt).substring(2),\n          n: N,\n          dklen: 32,\n          p: p,\n          r: r\n        },\n        mac: mac.substring(2)\n      }\n    }; // If we have a mnemonic, encrypt it into the JSON wallet\n\n    if (entropy) {\n      const mnemonicIv = randomBytes(16);\n      const mnemonicCounter = new aes.Counter(mnemonicIv);\n      const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n      const now = new Date();\n      const timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n      data[\"x-ethers\"] = {\n        client: client,\n        gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n        mnemonicCounter: hexlify(mnemonicIv).substring(2),\n        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n        path: path,\n        locale: locale,\n        version: \"0.1\"\n      };\n    }\n\n    return JSON.stringify(data);\n  });\n}","map":{"version":3,"sources":["../src.ts/keystore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\nexport class KeystoreAccount extends Description {\n    isKeystoreAccount(value) {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\nfunction _decrypt(data, key, ciphertext) {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n        return arrayify(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    const mnemonicKey = key.slice(32, 64);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if (getAddress(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    const account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: hexlify(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        }\n        catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = getPassword(password);\n    const kdf = searchPath(data, \"crypto/kdf\");\n    if (kdf && typeof (kdf) === \"string\") {\n        const throwError = function (name, value) {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) {\n                throwError(\"N\", N);\n            }\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            let prfFunc = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            }\n            else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            }\n            else {\n                throwError(\"prf\", prf);\n            }\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nexport function decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n    return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = JSON.parse(json);\n        const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n        return _getAccount(data, key);\n    });\n}\nexport function encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof (options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    const privateKey = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    let salt = null;\n    if (options.salt) {\n        salt = arrayify(options.salt);\n    }\n    else {\n        salt = randomBytes(32);\n        ;\n    }\n    // Override initialization vector\n    let iv = null;\n    if (options.iv) {\n        iv = arrayify(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    }\n    else {\n        iv = randomBytes(16);\n    }\n    // Override the uuid\n    let uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = arrayify(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    }\n    else {\n        uuidRandom = randomBytes(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = arrayify(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        const mac = keccak256(concat([macPrefix, ciphertext]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            Crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: hexlify(iv).substring(2),\n                },\n                ciphertext: hexlify(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                zpad(now.getUTCDate(), 2) + \"T\" +\n                zpad(now.getUTCHours(), 2) + \"-\" +\n                zpad(now.getUTCMinutes(), 2) + \"-\" +\n                zpad(now.getUTCSeconds(), 2) + \".0Z\");\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n}\n//# sourceMappingURL=keystore.js.map"]},"metadata":{},"sourceType":"module"}