{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        client = _a.client,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b, _c;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted) === null || _b === void 0 ? void 0 : _b.call(_a, response.data);\n      (_c = executeOptions.onCompleted) === null || _c === void 0 ? void 0 : _c.call(executeOptions, response.data);\n      return response;\n    }).catch(function (error) {\n      var _a, _b, _c, _d;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      if (((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) || clientOptions.onError) {\n        (_c = (_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onError) === null || _c === void 0 ? void 0 : _c.call(_b, error);\n        (_d = executeOptions.onError) === null || _d === void 0 ? void 0 : _d.call(executeOptions, error);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = useCallback(function () {\n    setResult({\n      called: false,\n      loading: false,\n      client: client\n    });\n  }, []);\n  useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}