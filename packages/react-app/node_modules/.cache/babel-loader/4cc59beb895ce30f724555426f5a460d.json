{"ast":null,"code":"import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"homestead\":\n      return \"rpc.ankr.com/eth/\";\n\n    case \"ropsten\":\n      return \"rpc.ankr.com/eth_ropsten/\";\n\n    case \"rinkeby\":\n      return \"rpc.ankr.com/eth_rinkeby/\";\n\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli/\";\n\n    case \"matic\":\n      return \"rpc.ankr.com/polygon/\";\n\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum/\";\n  }\n\n  return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\\/\" + getHost(network.name) + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/ankr-provider.ts"],"names":[],"mappings":"AAGA,SAAS,mBAAT,QAAoC,aAApC;AACA,SAAS,kBAAT,QAAmC,yBAAnC;AAIA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAGA,MAAM,aAAa,GAAG,kEAAtB;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAA6B;EACzB,QAAQ,IAAR;IACI,KAAK,WAAL;MACI,OAAO,mBAAP;;IACJ,KAAK,SAAL;MACI,OAAO,2BAAP;;IACJ,KAAK,SAAL;MACI,OAAO,2BAAP;;IACJ,KAAK,QAAL;MACI,OAAO,0BAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAP;;IAEJ,KAAK,UAAL;MACI,OAAO,wBAAP;EAdR;;EAgBA,OAAO,MAAM,CAAC,kBAAP,CAA0B,qBAA1B,EAAiD,MAAjD,EAAyD,IAAzD,CAAP;AACH;;AAED,OAAM,MAAO,YAAP,SAA4B,kBAA5B,CAA8C;EAGhD,mBAAmB,GAAA;IACf,OAAQ,KAAK,MAAL,KAAgB,aAAxB;EACH;;EAEe,OAAT,SAAS,CAAC,MAAD,EAAY;IACxB,IAAI,MAAM,IAAI,IAAd,EAAoB;MAAE,OAAO,aAAP;IAAuB;;IAC7C,OAAO,MAAP;EACH;;EAEY,OAAN,MAAM,CAAC,OAAD,EAAmB,MAAnB,EAA8B;IACvC,IAAI,MAAM,IAAI,IAAd,EAAoB;MAAE,MAAM,GAAG,aAAT;IAAyB;;IAC/C,MAAM,UAAU,GAAmB;MAC/B,SAAS,EAAE,IADoB;MAE/B,GAAG,EAAG,cAAc,OAAO,CAAC,OAAO,CAAC,IAAT,CAArB,GAAsC,MAFb;MAG/B,gBAAgB,EAAE,CAAC,OAAD,EAAkB,GAAlB,KAAiC;QAC/C,IAAI,MAAM,CAAC,MAAP,KAAkB,aAAtB,EAAqC;UACjC,mBAAmB;QACtB;;QACD,OAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;MACH;IAR8B,CAAnC;;IAWA,IAAI,MAAM,CAAC,aAAP,IAAwB,IAA5B,EAAkC;MAC9B,UAAU,CAAC,IAAX,GAAkB,EAAlB;MACA,UAAU,CAAC,QAAX,GAAsB,MAAM,CAAC,aAA7B;IACH;;IAED,OAAO,UAAP;EACH;;AA/B+C","sourceRoot":"","sourcesContent":["import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n}\n//# sourceMappingURL=ankr-provider.js.map"]},"metadata":{},"sourceType":"module"}