{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n\n          var diffOptions = _this.getDiffOptions(options.variables);\n\n          var diff = cache.diff(diffOptions);\n\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n\n          _this.updateLastDiff(diff, diffOptions);\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"sources":["../../src/core/QueryInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery, reobserveCacheFirst } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        const diff = this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          oq[\"observe\"]();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}