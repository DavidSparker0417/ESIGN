{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        defaultOptions = _a.defaultOptions,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _d = _a.refetchQueries,\n        refetchQueries = _d === void 0 ? [] : _d,\n        _e = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _e === void 0 ? false : _e,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _f = _a.fetchPolicy,\n        fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n        _g = _a.errorPolicy,\n        errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, mutationStoreValue, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 13);\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 14);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 15);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      _this.fetchCancelFns.delete(queryId);\n\n      if (queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"sources":["../../src/core/QueryManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesIterable,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\ntype DefaultOptions = import(\"./ApolloClient\").DefaultOptions;\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\",\n      errorPolicy = defaults && defaults.errorPolicy || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      return this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    this.fetchCancelFns.set(queryId, reason => {\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.cleanup(() => {\n      this.fetchCancelFns.delete(queryId);\n\n      if (queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n    });\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesIterable<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () => this.getResultsFromLink<TData, TVars>(\n      queryInfo,\n      cacheWriteBehavior,\n      {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      },\n    );\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}