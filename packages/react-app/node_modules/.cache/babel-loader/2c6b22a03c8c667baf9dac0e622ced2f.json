{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 30);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n\n        case 'mutation':\n          mutations.push(x);\n          break;\n\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 31);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") + \"subscriptions and \".concat(mutations.length, \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 32);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") + \"\".concat(definitions.length, \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 33);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") + \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 34);\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}