{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\n\nconst getProviderFromConfig = urlOrProviderOrProviderFunction => {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\n\nexport const getProvidersFromConfig = readOnlyUrls => fromEntries(Object.entries(readOnlyUrls).map(_ref => {\n  let [chainId, urlOrProviderOrProviderFunction] = _ref;\n  return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n}));\nexport function ReadonlyNetworksProvider(_ref2) {\n  let {\n    providerOverrides = {},\n    children\n  } = _ref2;\n  const {\n    readOnlyUrls = {}\n  } = useConfig();\n  const [providers, setProviders] = useState(() => Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  useEffect(() => {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: providers\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/readonlyNetworks/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;AACA,SAAS,eAAT,EAA0B,QAA1B,QAAwD,0BAAxD;AACA,SAAS,SAAT,QAA0B,cAA1B;AAEA,SAAS,uBAAT,QAAwC,WAAxC;AAEA,SAAS,WAAT,QAA4B,8BAA5B;;AAOA,MAAM,qBAAqB,GAAI,+BAAD,IAAiF;EAC7G,IAAI,QAAQ,CAAC,UAAT,CAAoB,+BAApB,CAAJ,EAA0D;IACxD,OAAO,+BAAP;EACD;;EACD,IAAI,OAAO,+BAAP,KAA2C,UAA/C,EAA2D;IACzD,OAAO,+BAA+B,EAAtC;EACD;;EACD,OAAO,IAAI,eAAJ,CAAoB,+BAApB,CAAP;AACD,CARD;;AAUA,OAAO,MAAM,sBAAsB,GAAI,YAAD,IACpC,WAAW,CACT,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,GAA7B,CAAiC;EAAA,IAAC,CAAC,OAAD,EAAU,+BAAV,CAAD;EAAA,OAAgD,CAC/E,OAD+E,EAE/E,qBAAqB,CAAC,+BAAD,CAF0D,CAAhD;AAAA,CAAjC,CADS,CADN;AAQP,OAAM,SAAU,wBAAV,QAA6F;EAAA,IAA1D;IAAE,iBAAiB,GAAG,EAAtB;IAA0B;EAA1B,CAA0D;EACjG,MAAM;IAAE,YAAY,GAAG;EAAjB,IAAwB,SAAS,EAAvC;EACA,MAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAY,MAAM,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvD,sBAAsB,CAAC,YAAD,CADiC,CAAA,EAEvD,iBAFuD,CAAlB,CAA1C;EAKA,SAAS,CAAC,MAAK;IACb,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,sBAAsB,CAAC,YAAD,CAA5B,CAAA,EAA+C,iBAA/C,CAAA,CAAZ;EACD,CAFQ,EAEN,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,IAA7B,EAFM,CAAT;EAIA,OAAO,IAAA,CAAC,uBAAuB,CAAC,QAAzB,EAAiC,MAAA,CAAA,MAAA,CAAA;IAAC,KAAK,EAAE;EAAR,CAAA,EAAiB;IAAA,QAAA,EAAG;EAAH,CAAjB,CAAjC,CAAP;AACD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction) => {\n    if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n        return urlOrProviderOrProviderFunction;\n    }\n    if (typeof urlOrProviderOrProviderFunction === 'function') {\n        return urlOrProviderOrProviderFunction();\n    }\n    return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\nexport const getProvidersFromConfig = (readOnlyUrls) => fromEntries(Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\n    chainId,\n    getProviderFromConfig(urlOrProviderOrProviderFunction),\n]));\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }) {\n    const { readOnlyUrls = {} } = useConfig();\n    const [providers, setProviders] = useState(() => (Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides)));\n    useEffect(() => {\n        setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n    }, Object.entries(readOnlyUrls).flat());\n    return _jsx(ReadonlyNetworksContext.Provider, Object.assign({ value: providers }, { children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}