{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = useRef();\n\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n\n  var state = stateRef.current;\n\n  var _a = useState(0),\n      _tick = _a[0],\n      setTick = _a[1];\n\n  state.forceUpdate = function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  };\n\n  return state;\n}\n\nvar InternalState = function () {\n  function InternalState(client, query, previous) {\n    this.client = client;\n    this.query = query;\n    this.asyncResolveFns = new Set();\n    this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n    var previousResult = previous && previous.result;\n    var previousData = previousResult && previousResult.data;\n\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  InternalState.prototype.forceUpdate = function () {\n    __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  };\n\n  InternalState.prototype.asyncUpdate = function () {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.asyncResolveFns.add(resolve);\n\n      _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);\n\n      _this.forceUpdate();\n    });\n  };\n\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(useCallback(function () {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n\n        _this.setResult(result);\n      };\n\n      var onError = function (error) {\n        var last = obsQuery[\"last\"];\n        subscription.unsubscribe();\n\n        try {\n          obsQuery.resetLastResults();\n          subscription = obsQuery.subscribe(onNext, onError);\n        } finally {\n          obsQuery[\"last\"] = last;\n        }\n\n        if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n          throw error;\n        }\n\n        var previousResult = _this.result;\n\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        return subscription.unsubscribe();\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    var queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(function (resolve) {\n        return resolve(queryResult);\n      });\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) || !equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n        this.observable.reobserve(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === 'standby') {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n\n  InternalState.prototype.getObsQueryOptions = function () {\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n  };\n\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var skip = _a.skip,\n        ssr = _a.ssr,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        displayName = _a.displayName,\n        defaultOptions = _a.defaultOptions,\n        otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"displayName\", \"defaultOptions\"]);\n\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === 'network-only' || watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n          fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n          _d = watchQueryOptions.initialFetchPolicy,\n          initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: 'standby'\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  };\n\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n\n  InternalState.prototype.onCompleted = function (data) {};\n\n  InternalState.prototype.onError = function (error) {};\n\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(this.getObsQueryOptions());\n    this.obsQueryFields = useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  };\n\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  };\n\n  InternalState.prototype.handleErrorOrCompleted = function (result) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  };\n\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n\n    return this.result;\n  };\n\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    var data = result.data,\n        partial = result.partial,\n        resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData\n    }));\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== 'cache-only') {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n\n  return InternalState;\n}();","map":{"version":3,"sources":["../../../src/react/hooks/useQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}