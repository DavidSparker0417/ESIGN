{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\n\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.addCount = 0;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function (result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function (error) {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", error];\n\n          _this.reject(error);\n\n          iterateObserversSafely(_this.observers, \"error\", error);\n        }\n      },\n      complete: function () {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          var value = _this.sources.shift();\n\n          if (!value) {\n            if (sub) setTimeout(function () {\n              return sub.unsubscribe();\n            });\n            _this.sub = null;\n\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n\n      _this.sources = [];\n\n      _this.handlers.complete();\n    };\n\n    _this.promise.catch(function (_) {});\n\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n\n    return _this;\n  }\n\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  };\n\n  Concast.prototype.removeObserver = function (observer, quietly) {\n    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {\n      this.handlers.complete();\n    }\n  };\n\n  Concast.prototype.cleanup = function (callback) {\n    var _this = this;\n\n    var called = false;\n\n    var once = function () {\n      if (!called) {\n        called = true;\n\n        _this.observers.delete(observer);\n\n        callback();\n      }\n    };\n\n    var observer = {\n      next: once,\n      error: once,\n      complete: once\n    };\n    var count = this.addCount;\n    this.addObserver(observer);\n    this.addCount = count;\n  };\n\n  return Concast;\n}(Observable);\n\nexport { Concast };\nfixObservableSubclass(Concast);","map":{"version":3,"sources":["../../../src/utilities/observables/Concast.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers, and no\n      // error or completion has been broadcast yet, make sure those observers\n      // have a chance to run and then remove themselves from this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub } = this;\n      if (sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}