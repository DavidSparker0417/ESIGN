{"ast":null,"code":"// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nvar currentContext = null; // This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\n\nvar MISSING_VALUE = {};\nvar idCounter = 1; // Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\n\nvar makeSlotClass = function () {\n  return (\n    /** @class */\n    function () {\n      function Slot() {\n        // If you have a Slot object, you can find out its slot.id, but you cannot\n        // guess the slot.id of a Slot you don't have access to, thanks to the\n        // randomized suffix.\n        this.id = [\"slot\", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(\":\");\n      }\n\n      Slot.prototype.hasValue = function () {\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\n          // We use the Slot object iself as a key to its value, which means the\n          // value cannot be obtained without a reference to the Slot object.\n          if (this.id in context_1.slots) {\n            var value = context_1.slots[this.id];\n            if (value === MISSING_VALUE) break;\n\n            if (context_1 !== currentContext) {\n              // Cache the value in currentContext.slots so the next lookup will\n              // be faster. This caching is safe because the tree of contexts and\n              // the values of the slots are logically immutable.\n              currentContext.slots[this.id] = value;\n            }\n\n            return true;\n          }\n        }\n\n        if (currentContext) {\n          // If a value was not found for this Slot, it's never going to be found\n          // no matter how many times we look it up, so we might as well cache\n          // the absence of the value, too.\n          currentContext.slots[this.id] = MISSING_VALUE;\n        }\n\n        return false;\n      };\n\n      Slot.prototype.getValue = function () {\n        if (this.hasValue()) {\n          return currentContext.slots[this.id];\n        }\n      };\n\n      Slot.prototype.withValue = function (value, callback, // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        var _a;\n\n        var slots = (_a = {\n          __proto__: null\n        }, _a[this.id] = value, _a);\n        var parent = currentContext;\n        currentContext = {\n          parent: parent,\n          slots: slots\n        };\n\n        try {\n          // Function.prototype.apply allows the arguments array argument to be\n          // omitted or undefined, so args! is fine here.\n          return callback.apply(thisArg, args);\n        } finally {\n          currentContext = parent;\n        }\n      }; // Capture the current context and wrap a callback function so that it\n      // reestablishes the captured context when called.\n\n\n      Slot.bind = function (callback) {\n        var context = currentContext;\n        return function () {\n          var saved = currentContext;\n\n          try {\n            currentContext = context;\n            return callback.apply(this, arguments);\n          } finally {\n            currentContext = saved;\n          }\n        };\n      }; // Immediately run a callback function without any captured context.\n\n\n      Slot.noContext = function (callback, // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        if (currentContext) {\n          var saved = currentContext;\n\n          try {\n            currentContext = null; // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n\n            return callback.apply(thisArg, args);\n          } finally {\n            currentContext = saved;\n          }\n        } else {\n          return callback.apply(thisArg, args);\n        }\n      };\n\n      return Slot;\n    }()\n  );\n}; // We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\n\n\nvar globalKey = \"@wry/context:Slot\";\nvar host = Array;\n\nvar Slot = host[globalKey] || function () {\n  var Slot = makeSlotClass();\n\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false\n    });\n  } finally {\n    return Slot;\n  }\n}();\n\nvar bind = Slot.bind,\n    noContext = Slot.noContext;\n\nfunction setTimeoutWithContext(callback, delay) {\n  return setTimeout(bind(callback), delay);\n} // Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\n\n\nfunction asyncFromGen(genFn) {\n  return function () {\n    var gen = genFn.apply(this, arguments);\n    var boundNext = bind(gen.next);\n    var boundThrow = bind(gen.throw);\n    return new Promise(function (resolve, reject) {\n      function invoke(method, argument) {\n        try {\n          var result = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n\n        var next = result.done ? resolve : invokeNext;\n\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n\n      var invokeNext = function (value) {\n        return invoke(boundNext, value);\n      };\n\n      var invokeThrow = function (error) {\n        return invoke(boundThrow, error);\n      };\n\n      invokeNext();\n    });\n  };\n}\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n} // If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\n\n\nvar wrappedFibers = [];\n\nfunction wrapYieldingFiberMethods(Fiber) {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    var wrap = function (obj, method) {\n      var fn = obj[method];\n\n      obj[method] = function () {\n        return noContext(fn, arguments, this);\n      };\n    }; // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n\n\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n\n  return Fiber;\n}\n\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };","map":{"version":3,"sources":["../src/slot.ts","../src/context.ts"],"names":[],"mappings":"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","sourcesContent":["type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult, TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: TThis) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = Array as any;\n\nexport const Slot: ReturnType<typeof makeSlotClass> = host[globalKey] || function () {\n  const Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n  } finally {\n    return Slot;\n  }\n}();\n","import { Slot } from \"./slot\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Relying on the @types/node declaration of global.setTimeout can make\n// things tricky for dowstream projects (see PR #7).\ndeclare function setTimeout(\n  callback: (...args: any[]) => any,\n  ms?: number,\n  ...args: any[]\n): any;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<\n  TArgs extends any[],\n  TYield = any,\n  TReturn = any,\n  TNext = any,\n>(\n  genFn: (...args: TArgs) => Generator<TYield, TReturn, TNext>\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n\n    type Method = (\n      this: Generator<TYield, TReturn, TNext>,\n      arg: any,\n    ) => IteratorResult<TYield, TReturn>;\n\n    const boundNext: Method = bind(gen.next);\n    const boundThrow: Method = bind(gen.throw!);\n\n    return new Promise((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result: any = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<any>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n"]},"metadata":{},"sourceType":"module"}