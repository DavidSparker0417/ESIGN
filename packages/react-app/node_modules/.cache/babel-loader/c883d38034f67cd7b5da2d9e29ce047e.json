{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n\nfunction numPad(value) {\n  const result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]); // Update the bytes offset\n\n    result[i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n\n    return this._supportsEip2544;\n  }\n\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      }; // Wildcard support; use EIP-2544 to resolve the request\n\n      let parseBytes = false;\n\n      if (yield this.supportsWildcard()) {\n        parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n\n      try {\n        let result = yield this.provider.call(tx);\n\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n\n      return null;\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\"); // No address\n\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          const scheme = match[1].toLowerCase();\n\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                const metadata = yield fetchJson(metadataUrl);\n\n                if (!metadata) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                let imageUrl = metadata.image;\n\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {// Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n\n                  if (ipfs == null) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n\n      const sender = (tx.from || \"0x0000000000000000000000000000000000000000\").toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i]; // URL expansion\n\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n\n        if (result.data) {\n          return result.data;\n        }\n\n        const errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        } // 5xx indicates server issue; try the next url\n\n\n        errorMessages.push(errorMessage);\n      }\n\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true; // Filter from the last known event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                  filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                }\n\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n\n                  if (logs.length === 0) {\n                    return;\n                  }\n\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    } // Make sure we stall requests to fetch blocks and txs\n\n\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      }); // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n          const sender = hexDataSlice(data, 0, 32);\n\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          } // Read the URLs from the response\n\n\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n\n            urls.push(url);\n          } // Get the CCIP calldata to forward\n\n\n          const calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n          const extraData = _parseBytes(data, 128);\n\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        } // Optimization since the eth node cannot change and does\n        // not have a wildcar resolver\n\n\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        } // Check the current node for a resolver\n\n\n        const addr = yield this._getResolver(currentName, \"getResolver\"); // Found a resolver!\n\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n\n          return resolver;\n        } // Get the parent node\n\n\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {// ENS registry cannot throw errors on resolver(bytes32)\n      }\n\n      return null;\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n\n      if (resolverAddr == null) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n\n        if (!resolverAddress) {\n          return null;\n        } // Try resolving the avatar against the addr.reverse resolver\n\n\n        resolver = new Resolver(this, resolverAddress, node);\n\n        try {\n          const avatar = yield resolver.getAvatar();\n\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        } // Try getting the name and performing forward lookup; allowing wildcards\n\n\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n\n        if (!resolver) {\n          return null;\n        }\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = (tx.from || \"0x0000000000000000000000000000000000000000\").toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // Filter from the last known event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild\n                            if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                                filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcar resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}