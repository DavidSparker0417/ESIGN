{"ast":null,"code":"import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useChainId } from './useChainId';\n\nfunction warnOnInvalidContractCall(call) {\n  console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);\n}\n\nfunction encodeCallData(call, chainId) {\n  if (!call) {\n    return undefined;\n  }\n\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: call.address,\n      data: call.abi.encodeFunctionData(call.method, call.args),\n      chainId\n    };\n  } catch (_a) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n}\n/**\n * @public\n * @deprecated Use {@link useCalls} instead.\n */\n\n\nexport function useContractCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useContractCalls([call], queryParams)[0];\n}\n/**\n * @public\n * @deprecated Use {@link useCall} instead.\n */\n\nexport function useContractCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const rawCalls = useMemo(() => calls.map(call => chainId !== undefined ? encodeCallData(call, chainId) : undefined), [JSON.stringify(calls.map(call => {\n    var _a;\n\n    return call && {\n      address: (_a = call.address) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\n      method: call.method,\n      args: call.args\n    };\n  })), chainId]);\n  const results = useChainCalls(rawCalls);\n  return useMemo(() => results.map((result, idx) => {\n    const call = calls[idx];\n\n    if (result === '0x') {\n      warnOnInvalidContractCall(call);\n      return undefined;\n    }\n\n    return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n  }), [JSON.stringify(results)]);\n}","map":{"version":3,"sources":["../../../../src/hooks/useContractCall.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,OAAxB;AAKA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,UAAT,QAA2B,cAA3B;;AAEA,SAAS,yBAAT,CAAmC,IAAnC,EAA6D;EAC3D,OAAO,CAAC,IAAR,CACE,kCAAkC,IAAI,IAAI,IAAI,CAAC,OAAO,WAAW,IAAI,IAAI,IAAI,CAAC,MAAM,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,EADhH;AAGD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAAoD,OAApD,EAAoE;EAClE,IAAI,CAAC,IAAL,EAAW;IACT,OAAO,SAAP;EACD;;EACD,IAAI,CAAC,IAAI,CAAC,OAAN,IAAiB,CAAC,IAAI,CAAC,MAA3B,EAAmC;IACjC,yBAAyB,CAAC,IAAD,CAAzB;IACA,OAAO,SAAP;EACD;;EACD,IAAI;IACF,OAAO;MAAE,OAAO,EAAE,IAAI,CAAC,OAAhB;MAAyB,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,kBAAT,CAA4B,IAAI,CAAC,MAAjC,EAAyC,IAAI,CAAC,IAA9C,CAA/B;MAAoF;IAApF,CAAP;EACD,CAFD,CAEE,OAAA,EAAA,EAAM;IACN,yBAAyB,CAAC,IAAD,CAAzB;IACA,OAAO,SAAP;EACD;AACF;AAaD;;;AAGG;;;AACH,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAmF;EAAA,IAA7B,WAA6B,uEAAF,EAAE;EACvF,OAAO,gBAAgB,CAAC,CAAC,IAAD,CAAD,EAAS,WAAT,CAAhB,CAAsC,CAAtC,CAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,gBAAV,CACJ,KADI,EAEyB;EAAA,IAA7B,WAA6B,uEAAF,EAAE;EAE7B,MAAM,OAAO,GAAG,UAAU,CAAC;IAAE;EAAF,CAAD,CAA1B;EAEA,MAAM,QAAQ,GAAG,OAAO,CACtB,MAAM,KAAK,CAAC,GAAN,CAAW,IAAD,IAAW,OAAO,KAAK,SAAZ,GAAwB,cAAc,CAAC,IAAD,EAAO,OAAP,CAAtC,GAAwD,SAA7E,CADgB,EAEtB,CACE,IAAI,CAAC,SAAL,CACE,KAAK,CAAC,GAAN,CAAW,IAAD,IAAS;IAAA,IAAA,EAAA;;IAAC,OAAA,IAAI,IAAI;MAAE,OAAO,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,WAAF,EAAvB;MAAwC,MAAM,EAAE,IAAI,CAAC,MAArD;MAA6D,IAAI,EAAE,IAAI,CAAC;IAAxE,CAAR;EAAsF,CAA1G,CADF,CADF,EAIE,OAJF,CAFsB,CAAxB;EAUA,MAAM,OAAO,GAAG,aAAa,CAAC,QAAD,CAA7B;EAEA,OAAO,OAAO,CACZ,MACE,OAAO,CAAC,GAAR,CAAY,CAAC,MAAD,EAAS,GAAT,KAAgB;IAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,GAAD,CAAlB;;IACA,IAAI,MAAM,KAAK,IAAf,EAAqB;MACnB,yBAAyB,CAAC,IAAD,CAAzB;MACA,OAAO,SAAP;IACD;;IACD,OAAO,IAAI,IAAI,MAAR,GAAkB,IAAI,CAAC,GAAL,CAAS,oBAAT,CAA8B,IAAI,CAAC,MAAnC,EAA2C,MAA3C,CAAlB,GAAiF,SAAxF;EACD,CAPD,CAFU,EAUZ,CAAC,IAAI,CAAC,SAAL,CAAe,OAAf,CAAD,CAVY,CAAd;AAYD","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useChainId } from './useChainId';\nfunction warnOnInvalidContractCall(call) {\n    console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);\n}\nfunction encodeCallData(call, chainId) {\n    if (!call) {\n        return undefined;\n    }\n    if (!call.address || !call.method) {\n        warnOnInvalidContractCall(call);\n        return undefined;\n    }\n    try {\n        return { address: call.address, data: call.abi.encodeFunctionData(call.method, call.args), chainId };\n    }\n    catch (_a) {\n        warnOnInvalidContractCall(call);\n        return undefined;\n    }\n}\n/**\n * @public\n * @deprecated Use {@link useCalls} instead.\n */\nexport function useContractCall(call, queryParams = {}) {\n    return useContractCalls([call], queryParams)[0];\n}\n/**\n * @public\n * @deprecated Use {@link useCall} instead.\n */\nexport function useContractCalls(calls, queryParams = {}) {\n    const chainId = useChainId({ queryParams });\n    const rawCalls = useMemo(() => calls.map((call) => (chainId !== undefined ? encodeCallData(call, chainId) : undefined)), [\n        JSON.stringify(calls.map((call) => { var _a; return call && { address: (_a = call.address) === null || _a === void 0 ? void 0 : _a.toLowerCase(), method: call.method, args: call.args }; })),\n        chainId,\n    ]);\n    const results = useChainCalls(rawCalls);\n    return useMemo(() => results.map((result, idx) => {\n        const call = calls[idx];\n        if (result === '0x') {\n            warnOnInvalidContractCall(call);\n            return undefined;\n        }\n        return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n    }), [JSON.stringify(results)]);\n}\n//# sourceMappingURL=useContractCall.js.map"]},"metadata":{},"sourceType":"module"}