{"ast":null,"code":"import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @public\n */\n\nexport function useSendTransaction(options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(chainId, options);\n\n  const sendTransaction = async transactionRequest => {\n    const signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest));\n    }\n  };\n\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useSendTransaction.ts"],"names":[],"mappings":"AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AAEA;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAAyD;EAC7D,MAAM;IAAE,OAAF;IAAW;EAAX,IAAuB,SAAS,EAAtC;EACA,MAAM;IAAE,kBAAF;IAAsB,KAAtB;IAA6B;EAA7B,IAA4C,qBAAqB,CAAC,OAAD,EAAU,OAAV,CAAvE;;EAEA,MAAM,eAAe,GAAG,MAAO,kBAAP,IAAiD;IACvE,MAAM,MAAM,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAT,MAAmB,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAAnB,CAAf;;IACA,IAAI,MAAJ,EAAY;MACV,MAAM,kBAAkB,CAAC,MAAM,CAAC,eAAP,CAAuB,kBAAvB,CAAD,CAAxB;IACD;EACF,CALD;;EAOA,OAAO;IAAE,eAAF;IAAmB,KAAnB;IAA0B;EAA1B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @public\n */\nexport function useSendTransaction(options) {\n    const { library, chainId } = useEthers();\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options);\n    const sendTransaction = async (transactionRequest) => {\n        const signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n        if (signer) {\n            await promiseTransaction(signer.sendTransaction(transactionRequest));\n        }\n    };\n    return { sendTransaction, state, resetState };\n}\n//# sourceMappingURL=useSendTransaction.js.map"]},"metadata":{},"sourceType":"module"}