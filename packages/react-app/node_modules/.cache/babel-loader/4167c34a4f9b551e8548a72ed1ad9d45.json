{"ast":null,"code":"import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}","map":{"version":3,"sources":["../../../src/link/http/rewriteURIForGET.ts"],"names":[],"mappings":"AAAA,SAAS,uBAAT,QAAwC,8BAAxC;AAKA,OAAM,SAAU,gBAAV,CAA2B,SAA3B,EAA8C,IAA9C,EAAwD;EAG5D,IAAM,WAAW,GAAa,EAA9B;;EACA,IAAM,aAAa,GAAG,UAAC,GAAD,EAAc,KAAd,EAA2B;IAC/C,WAAW,CAAC,IAAZ,CAAiB,GAAA,MAAA,CAAG,GAAH,EAAM,GAAN,EAAM,MAAN,CAAU,kBAAkB,CAAC,KAAD,CAA5B,CAAjB;EACD,CAFD;;EAIA,IAAI,WAAW,IAAf,EAAqB;IACnB,aAAa,CAAC,OAAD,EAAU,IAAI,CAAC,KAAf,CAAb;EACD;;EACD,IAAI,IAAI,CAAC,aAAT,EAAwB;IACtB,aAAa,CAAC,eAAD,EAAkB,IAAI,CAAC,aAAvB,CAAb;EACD;;EACD,IAAI,IAAI,CAAC,SAAT,EAAoB;IAClB,IAAI,mBAAmB,GAAA,KAAA,CAAvB;;IACA,IAAI;MACF,mBAAmB,GAAG,uBAAuB,CAC3C,IAAI,CAAC,SADsC,EAE3C,eAF2C,CAA7C;IAID,CALD,CAKE,OAAO,UAAP,EAAmB;MACnB,OAAO;QAAE,UAAU,EAAA;MAAZ,CAAP;IACD;;IACD,aAAa,CAAC,WAAD,EAAc,mBAAd,CAAb;EACD;;EACD,IAAI,IAAI,CAAC,UAAT,EAAqB;IACnB,IAAI,oBAAoB,GAAA,KAAA,CAAxB;;IACA,IAAI;MACF,oBAAoB,GAAG,uBAAuB,CAC5C,IAAI,CAAC,UADuC,EAE5C,gBAF4C,CAA9C;IAID,CALD,CAKE,OAAO,UAAP,EAAmB;MACnB,OAAO;QAAE,UAAU,EAAA;MAAZ,CAAP;IACD;;IACD,aAAa,CAAC,YAAD,EAAe,oBAAf,CAAb;EACD;;EAQD,IAAI,QAAQ,GAAG,EAAf;EAAA,IACE,WAAW,GAAG,SADhB;EAEA,IAAM,aAAa,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAtB;;EACA,IAAI,aAAa,KAAK,CAAC,CAAvB,EAA0B;IACxB,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB,aAAjB,CAAX;IACA,WAAW,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,aAApB,CAAd;EACD;;EACD,IAAM,iBAAiB,GAAG,WAAW,CAAC,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA9B,GAAkC,GAAlC,GAAwC,GAAlE;EACA,IAAM,MAAM,GACV,WAAW,GAAG,iBAAd,GAAkC,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAlC,GAA0D,QAD5D;EAEA,OAAO;IAAE,MAAM,EAAA;EAAR,CAAP;AACD","sourcesContent":["import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}