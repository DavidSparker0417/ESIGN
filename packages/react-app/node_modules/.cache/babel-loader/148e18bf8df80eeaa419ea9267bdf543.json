{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      preferredFetch = linkOptions.fetch,\n      _b = linkOptions.print,\n      print = _b === void 0 ? defaultPrinter : _b,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      _c = linkOptions.includeUnusedVariables,\n      includeUnusedVariables = _c === void 0 ? false : _c,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["../../../src/link/http/createHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}