{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\n\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var uri = options.uri,\n        credentials = options.credentials,\n        headers = options.headers,\n        cache = options.cache,\n        _a = options.ssrMode,\n        ssrMode = _a === void 0 ? false : _a,\n        _b = options.ssrForceFetchDelay,\n        ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        _c = options.connectToDevTools,\n        connectToDevTools = _c === void 0 ? typeof window === 'object' && !window.__APOLLO_CLIENT__ && __DEV__ : _c,\n        _d = options.queryDeduplication,\n        queryDeduplication = _d === void 0 ? true : _d,\n        defaultOptions = options.defaultOptions,\n        _e = options.assumeImmutableResults,\n        assumeImmutableResults = _e === void 0 ? false : _e,\n        resolvers = options.resolvers,\n        typeDefs = options.typeDefs,\n        fragmentMatcher = options.fragmentMatcher,\n        clientAwarenessName = options.name,\n        clientAwarenessVersion = options.version;\n    var link = options.link;\n\n    if (!link) {\n      link = uri ? new HttpLink({\n        uri: uri,\n        credentials: credentials,\n        headers: headers\n      }) : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw __DEV__ ? new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\") : new InvariantError(7);\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n\n      if (typeof window !== 'undefined' && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n        var nav = window.navigator;\n        var ua = nav && nav.userAgent;\n        var url = void 0;\n\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n\n        if (url) {\n          __DEV__ && invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: \" + url);\n        }\n      }\n    }\n\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: connectToDevTools ? function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.getQueryStore(),\n              mutations: _this.queryManager.mutationStore || {}\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      } : void 0\n    });\n  }\n\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.watchQuery(options);\n  };\n\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    __DEV__ ? invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.') : invariant(options.fetchPolicy !== 'cache-and-network', 8);\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.query(options);\n  };\n\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n\n    return this.queryManager.mutate(options);\n  };\n\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.cache.readQuery(options, optimistic);\n  };\n\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.cache.readFragment(options, optimistic);\n  };\n\n  ApolloClient.prototype.writeQuery = function (options) {\n    this.cache.writeQuery(options);\n    this.queryManager.broadcastQueries();\n  };\n\n  ApolloClient.prototype.writeFragment = function (options) {\n    this.cache.writeFragment(options);\n    this.queryManager.broadcastQueries();\n  };\n\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: false\n      });\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: true\n      });\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n\n  ApolloClient.prototype.refetchQueries = function (options) {\n    var map = this.queryManager.refetchQueries(options);\n    var queries = [];\n    var results = [];\n    map.forEach(function (result, obsQuery) {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n    var result = Promise.all(results);\n    result.queries = queries;\n    result.results = results;\n    result.catch(function (error) {\n      __DEV__ && invariant.debug(\"In client.refetchQueries, Promise.all promise rejected with error \".concat(error));\n    });\n    return result;\n  };\n\n  ApolloClient.prototype.getObservableQueries = function (include) {\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    return this.queryManager.getObservableQueries(include);\n  };\n\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n\n  ApolloClient.prototype.setLink = function (newLink) {\n    this.link = this.queryManager.link = newLink;\n  };\n\n  return ApolloClient;\n}();\n\nexport { ApolloClient };","map":{"version":3,"sources":["../../src/core/ApolloClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy } from '../cache';\nimport { Observable } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities\";\nexport { mergeOptions }\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables = OperationVariables,\n    TContext = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings. An \"active\" query is one that has observers and a\n   * `fetchPolicy` other than \"standby\" or \"cache-only\". You can include all\n   * `ObservableQuery` objects (including the inactive ones) by passing \"all\"\n   * instead of \"active\", or you can include just a subset of active queries by\n   * passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}