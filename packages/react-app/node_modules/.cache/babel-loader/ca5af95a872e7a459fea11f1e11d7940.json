{"ast":null,"code":"import { utils } from 'ethers';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { shortenString } from './common';\n/**\n * @public\n */\n\nexport function shortenAddress(address) {\n  try {\n    const formattedAddress = utils.getAddress(address);\n    return shortenString(formattedAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\n\nexport function shortenIfAddress(address) {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address);\n  }\n\n  return '';\n}\n/**\n * @public\n */\n\nexport function compareAddress(firstAddress, secondAddress) {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress);\n    const parsedSecondAddress = BigNumber.from(secondAddress);\n\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1;\n    }\n\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1;\n    }\n\n    return 0;\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\n\nexport function addressEqual(firstAddress, secondAddress) {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/address.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,QAAtB;AACA,SAAS,SAAT,QAA0B,0BAA1B;AAEA,SAAS,aAAT,QAA8B,UAA9B;AAEA;;AAEG;;AACH,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAwC;EAC5C,IAAI;IACF,MAAM,gBAAgB,GAAG,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAAzB;IACA,OAAO,aAAa,CAAC,gBAAD,CAApB;EACD,CAHD,CAGE,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;EACD;AACF;AAED;;AAEG;;AACH,OAAM,SAAU,gBAAV,CAA2B,OAA3B,EAAkD;EACtD,IAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,CAAC,MAAR,GAAiB,CAApD,EAAuD;IACrD,OAAO,cAAc,CAAC,OAAD,CAArB;EACD;;EACD,OAAO,EAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,cAAV,CAAyB,YAAzB,EAA+C,aAA/C,EAAoE;EACxE,IAAI;IACF,MAAM,kBAAkB,GAAG,SAAS,CAAC,IAAV,CAAe,YAAf,CAA3B;IACA,MAAM,mBAAmB,GAAG,SAAS,CAAC,IAAV,CAAe,aAAf,CAA5B;;IAEA,IAAI,kBAAkB,CAAC,EAAnB,CAAsB,mBAAtB,CAAJ,EAAgD;MAC9C,OAAO,CAAP;IACD;;IAED,IAAI,kBAAkB,CAAC,EAAnB,CAAsB,mBAAtB,CAAJ,EAAgD;MAC9C,OAAO,CAAC,CAAR;IACD;;IAED,OAAO,CAAP;EACD,CAbD,CAaE,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;EACD;AACF;AAED;;AAEG;;AACH,OAAM,SAAU,YAAV,CAAuB,YAAvB,EAA6C,aAA7C,EAAkE;EACtE,IAAI;IACF,OAAO,KAAK,CAAC,UAAN,CAAiB,YAAjB,MAAmC,KAAK,CAAC,UAAN,CAAiB,aAAjB,CAA1C;EACD,CAFD,CAEE,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;EACD;AACF","sourceRoot":"","sourcesContent":["import { utils } from 'ethers';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { shortenString } from './common';\n/**\n * @public\n */\nexport function shortenAddress(address) {\n    try {\n        const formattedAddress = utils.getAddress(address);\n        return shortenString(formattedAddress);\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n/**\n * @public\n */\nexport function shortenIfAddress(address) {\n    if (typeof address === 'string' && address.length > 0) {\n        return shortenAddress(address);\n    }\n    return '';\n}\n/**\n * @public\n */\nexport function compareAddress(firstAddress, secondAddress) {\n    try {\n        const parsedFirstAddress = BigNumber.from(firstAddress);\n        const parsedSecondAddress = BigNumber.from(secondAddress);\n        if (parsedFirstAddress.gt(parsedSecondAddress)) {\n            return 1;\n        }\n        if (parsedFirstAddress.lt(parsedSecondAddress)) {\n            return -1;\n        }\n        return 0;\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n/**\n * @public\n */\nexport function addressEqual(firstAddress, secondAddress) {\n    try {\n        return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"module"}