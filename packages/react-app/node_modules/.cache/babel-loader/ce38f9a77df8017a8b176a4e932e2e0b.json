{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.config = normalizeConfig(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n\n    _this.init();\n\n    return _this;\n  }\n\n  InMemoryCache.prototype.init = function () {\n    var rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n\n    var previousReader = this.storeReader;\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: shouldCanonizeResults(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon\n    }));\n    this.maybeBroadcastWatch = wrap(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n              rootId = c.rootId,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, canonicalStringify({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n\n    try {\n      return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        return null;\n      }\n\n      throw e;\n    }\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    if (!this.watches.size) {\n      recallCache(this);\n    }\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function (options) {\n    canonicalStringify.reset();\n    var ids = this.optimisticData.gc();\n\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n\n    return ids;\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    if (isReference(object)) return object.__ref;\n\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      __DEV__ && invariant.warn(e);\n    }\n  };\n\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n\n    this.init();\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var update = options.update,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        removeOptimistic = options.removeOptimistic,\n        onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n\n    var perform = function (layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    var alreadyDirty = new Set();\n\n    if (onWatchUpdated && !this.txCount) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n\n    if (typeof optimistic === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n\n          if (result !== false) {\n            alreadyDirty.delete(watch);\n          }\n\n          return result;\n        }\n      }));\n\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      this.broadcastWatches(options);\n    }\n\n    return updateResult;\n  };\n\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    var diff = this.diff(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","map":{"version":3,"sources":["../../../src/cache/inmemory/inMemoryCache.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { OptimisticWrapperFunction, wrap } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport { InMemoryCacheConfig, NormalizedCacheObject } from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport { Policies } from './policies';\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from './helpers';\nimport { canonicalStringify } from './object-canon';\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  | \"optimistic\"\n  | \"onWatchUpdated\"\n>\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  private maybeBroadcastWatch: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]>;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon: resetResultIdentities\n          ? void 0\n          : previousReader && previousReader.canon,\n      }),\n    );\n\n    this.maybeBroadcastWatch = wrap((\n      c: Cache.WatchOptions,\n      options?: BroadcastOptions,\n    ) => {\n      return this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: (c: Cache.WatchOptions) => {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        const store = c.optimistic ? this.optimisticData : this.data;\n        if (supportsResultCaching(store)) {\n          const { optimistic, rootId, variables } = c;\n          return store.makeCacheKey(\n            c.query,\n            // Different watches can have the same query, optimistic\n            // status, rootId, and variables, but if their callbacks are\n            // different, the (identical) result needs to be delivered to\n            // each distinct callback. The easiest way to achieve that\n            // separation is to include c.callback in the cache key for\n            // maybeBroadcastWatch calls. See issue #5733.\n            c.callback,\n            canonicalStringify({ optimistic, rootId, variables }),\n          );\n        }\n      }\n    });\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([\n      this.data.group,\n      this.optimisticData.group,\n    ]).forEach(group => group.resetCaching());\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        ...options,\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not\n        // need to worry about catching \"normal\" exceptions resulting from\n        // incomplete cache data. Unexpected errors will be re-thrown. If\n        // you need more information about which fields were missing, use\n        // cache.diff instead, and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>,\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(watch => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>,\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === 'string') {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(watch => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || (optimisticId !== null),\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    options?: BroadcastOptions,\n  ) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic &&\n          typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated &&\n          options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}